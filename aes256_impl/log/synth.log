
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.29+42 (git sha1 2004a9ff4, g++ 12.2.1 -Os)


-- Running command `read -sv src/mix_columns.v src/MUL3.v src/mix_w.v src/sbox.v src/counters.v src/shift_rows.v src/round_constant.v src/key_exp.v src/aes256_enc.v src/round_key.v src/sub_bytes.v src/byte_mix.v src/xtimes.v src/aes256_impl.v; synth_gatemate -top aes256_impl -nomx8 -vlog net/aes256_impl_synth.v' --

1. Executing Verilog-2005 frontend: src/mix_columns.v
Parsing SystemVerilog input from `src/mix_columns.v' to AST representation.
Storing AST representation for module `$abstract\mix_columns'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: src/MUL3.v
Parsing SystemVerilog input from `src/MUL3.v' to AST representation.
Storing AST representation for module `$abstract\MUL3'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: src/mix_w.v
Parsing SystemVerilog input from `src/mix_w.v' to AST representation.
Storing AST representation for module `$abstract\mix_w'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: src/sbox.v
Parsing SystemVerilog input from `src/sbox.v' to AST representation.
Storing AST representation for module `$abstract\sbox'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: src/counters.v
Parsing SystemVerilog input from `src/counters.v' to AST representation.
Storing AST representation for module `$abstract\counters'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: src/shift_rows.v
Parsing SystemVerilog input from `src/shift_rows.v' to AST representation.
Storing AST representation for module `$abstract\shift_rows'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: src/round_constant.v
Parsing SystemVerilog input from `src/round_constant.v' to AST representation.
Storing AST representation for module `$abstract\round_constant'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: src/key_exp.v
Parsing SystemVerilog input from `src/key_exp.v' to AST representation.
Storing AST representation for module `$abstract\key_exp'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: src/aes256_enc.v
Parsing SystemVerilog input from `src/aes256_enc.v' to AST representation.
Storing AST representation for module `$abstract\aes256_enc'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: src/round_key.v
Parsing SystemVerilog input from `src/round_key.v' to AST representation.
Storing AST representation for module `$abstract\round_key'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: src/sub_bytes.v
Parsing SystemVerilog input from `src/sub_bytes.v' to AST representation.
Storing AST representation for module `$abstract\sub_bytes'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: src/byte_mix.v
Parsing SystemVerilog input from `src/byte_mix.v' to AST representation.
Storing AST representation for module `$abstract\byte_mix'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: src/xtimes.v
Parsing SystemVerilog input from `src/xtimes.v' to AST representation.
Storing AST representation for module `$abstract\xtimes'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: src/aes256_impl.v
Parsing SystemVerilog input from `src/aes256_impl.v' to AST representation.
Storing AST representation for module `$abstract\aes256_impl'.
Successfully finished Verilog frontend.

15. Executing SYNTH_GATEMATE pass.

15.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/cells_sim.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\CC_IBUF'.
Generating RTLIL representation for module `\CC_OBUF'.
Generating RTLIL representation for module `\CC_TOBUF'.
Generating RTLIL representation for module `\CC_IOBUF'.
Generating RTLIL representation for module `\CC_LVDS_IBUF'.
Generating RTLIL representation for module `\CC_LVDS_OBUF'.
Generating RTLIL representation for module `\CC_LVDS_TOBUF'.
Generating RTLIL representation for module `\CC_LVDS_IOBUF'.
Generating RTLIL representation for module `\CC_IDDR'.
Generating RTLIL representation for module `\CC_ODDR'.
Generating RTLIL representation for module `\CC_DFF'.
Generating RTLIL representation for module `\CC_DLT'.
Generating RTLIL representation for module `\CC_LUT1'.
Generating RTLIL representation for module `\CC_LUT2'.
Generating RTLIL representation for module `\CC_LUT3'.
Generating RTLIL representation for module `\CC_LUT4'.
Generating RTLIL representation for module `\CC_MX2'.
Generating RTLIL representation for module `\CC_MX4'.
Generating RTLIL representation for module `\CC_MX8'.
Generating RTLIL representation for module `\CC_ADDF'.
Generating RTLIL representation for module `\CC_MULT'.
Generating RTLIL representation for module `\CC_BUFG'.
Generating RTLIL representation for module `\CC_BRAM_20K'.
Generating RTLIL representation for module `\CC_BRAM_40K'.
Generating RTLIL representation for module `\CC_FIFO_40K'.
Generating RTLIL representation for module `\CC_L2T4'.
Generating RTLIL representation for module `\CC_L2T5'.
Successfully finished Verilog frontend.

15.2. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/cells_bb.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\CC_PLL'.
Generating RTLIL representation for module `\CC_PLL_ADV'.
Generating RTLIL representation for module `\CC_SERDES'.
Generating RTLIL representation for module `\CC_CFG_CTRL'.
Generating RTLIL representation for module `\CC_USR_RSTN'.
Successfully finished Verilog frontend.

15.3. Executing HIERARCHY pass (managing design hierarchy).

15.4. Executing AST frontend in derive mode using pre-parsed AST for module `\aes256_impl'.
Generating RTLIL representation for module `\aes256_impl'.

15.4.1. Analyzing design hierarchy..
Top module:  \aes256_impl

15.4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\aes256_enc'.
Generating RTLIL representation for module `\aes256_enc'.

15.4.3. Analyzing design hierarchy..
Top module:  \aes256_impl
Used module:     \aes256_enc

15.4.4. Executing AST frontend in derive mode using pre-parsed AST for module `\key_exp'.
Generating RTLIL representation for module `\key_exp'.

15.4.5. Executing AST frontend in derive mode using pre-parsed AST for module `\shift_rows'.
Generating RTLIL representation for module `\shift_rows'.

15.4.6. Executing AST frontend in derive mode using pre-parsed AST for module `\sub_bytes'.
Generating RTLIL representation for module `\sub_bytes'.

15.4.7. Executing AST frontend in derive mode using pre-parsed AST for module `\mix_columns'.
Generating RTLIL representation for module `\mix_columns'.

15.4.8. Executing AST frontend in derive mode using pre-parsed AST for module `\counters'.
Generating RTLIL representation for module `\counters'.
Note: Assuming pure combinatorial block at src/counters.v:51.1-65.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at src/counters.v:68.1-114.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.

15.4.9. Analyzing design hierarchy..
Top module:  \aes256_impl
Used module:     \aes256_enc
Used module:         \key_exp
Used module:         \shift_rows
Used module:         \sub_bytes
Used module:         \mix_columns
Used module:         \counters

15.4.10. Executing AST frontend in derive mode using pre-parsed AST for module `\mix_w'.
Generating RTLIL representation for module `\mix_w'.

15.4.11. Executing AST frontend in derive mode using pre-parsed AST for module `\sbox'.
Generating RTLIL representation for module `\sbox'.

15.4.12. Executing AST frontend in derive mode using pre-parsed AST for module `\round_key'.
Generating RTLIL representation for module `\round_key'.

15.4.13. Executing AST frontend in derive mode using pre-parsed AST for module `\round_constant'.
Generating RTLIL representation for module `\round_constant'.

15.4.14. Analyzing design hierarchy..
Top module:  \aes256_impl
Used module:     \aes256_enc
Used module:         \key_exp
Used module:             \round_key
Used module:             \round_constant
Used module:         \shift_rows
Used module:         \sub_bytes
Used module:             \sbox
Used module:         \mix_columns
Used module:             \mix_w
Used module:         \counters

15.4.15. Executing AST frontend in derive mode using pre-parsed AST for module `\byte_mix'.
Generating RTLIL representation for module `\byte_mix'.

15.4.16. Analyzing design hierarchy..
Top module:  \aes256_impl
Used module:     \aes256_enc
Used module:         \key_exp
Used module:             \round_key
Used module:             \round_constant
Used module:         \shift_rows
Used module:         \sub_bytes
Used module:             \sbox
Used module:         \mix_columns
Used module:             \mix_w
Used module:                 \byte_mix
Used module:         \counters

15.4.17. Executing AST frontend in derive mode using pre-parsed AST for module `\MUL3'.
Generating RTLIL representation for module `\MUL3'.

15.4.18. Executing AST frontend in derive mode using pre-parsed AST for module `\xtimes'.
Generating RTLIL representation for module `\xtimes'.

15.4.19. Analyzing design hierarchy..
Top module:  \aes256_impl
Used module:     \aes256_enc
Used module:         \key_exp
Used module:             \round_key
Used module:             \round_constant
Used module:         \shift_rows
Used module:         \sub_bytes
Used module:             \sbox
Used module:         \mix_columns
Used module:             \mix_w
Used module:                 \byte_mix
Used module:                     \MUL3
Used module:                         \xtimes
Used module:         \counters

15.4.20. Analyzing design hierarchy..
Top module:  \aes256_impl
Used module:     \aes256_enc
Used module:         \key_exp
Used module:             \round_key
Used module:             \round_constant
Used module:         \shift_rows
Used module:         \sub_bytes
Used module:             \sbox
Used module:         \mix_columns
Used module:             \mix_w
Used module:                 \byte_mix
Used module:                     \MUL3
Used module:                         \xtimes
Used module:         \counters
Removing unused module `$abstract\aes256_impl'.
Removing unused module `$abstract\xtimes'.
Removing unused module `$abstract\byte_mix'.
Removing unused module `$abstract\sub_bytes'.
Removing unused module `$abstract\round_key'.
Removing unused module `$abstract\aes256_enc'.
Removing unused module `$abstract\key_exp'.
Removing unused module `$abstract\round_constant'.
Removing unused module `$abstract\shift_rows'.
Removing unused module `$abstract\counters'.
Removing unused module `$abstract\sbox'.
Removing unused module `$abstract\mix_w'.
Removing unused module `$abstract\MUL3'.
Removing unused module `$abstract\mix_columns'.
Removed 14 unused modules.
Mapping positional arguments of cell sub_bytes.sbox3_u (sbox).
Mapping positional arguments of cell sub_bytes.sbox2_u (sbox).
Mapping positional arguments of cell sub_bytes.sbox1_u (sbox).
Mapping positional arguments of cell sub_bytes.sbox0_u (sbox).
Mapping positional arguments of cell key_exp.round_key_u (round_key).
Mapping positional arguments of cell key_exp.round_constant_u (round_constant).
Mapping positional arguments of cell aes256_enc.key_exp_u (key_exp).
Mapping positional arguments of cell aes256_enc.shift_rows_u (shift_rows).
Mapping positional arguments of cell aes256_enc.sub_bytes_u (sub_bytes).
Mapping positional arguments of cell aes256_enc.mix_columns_u (mix_columns).
Mapping positional arguments of cell aes256_enc.counters_u (counters).

15.5. Executing PROC pass (convert processes to netlists).

15.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

15.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$src/round_constant.v:34$387 in module round_constant.
Marked 1 switch rules as full_case in process $proc$src/round_key.v:31$375 in module round_key.
Marked 2 switch rules as full_case in process $proc$src/counters.v:116$84 in module counters.
Marked 2 switch rules as full_case in process $proc$src/counters.v:68$82 in module counters.
Marked 1 switch rules as full_case in process $proc$src/counters.v:51$78 in module counters.
Marked 1 switch rules as full_case in process $proc$src/counters.v:42$76 in module counters.
Marked 1 switch rules as full_case in process $proc$src/mix_columns.v:40$58 in module mix_columns.
Marked 2 switch rules as full_case in process $proc$src/sub_bytes.v:33$53 in module sub_bytes.
Marked 8 switch rules as full_case in process $proc$src/shift_rows.v:46$43 in module shift_rows.
Marked 2 switch rules as full_case in process $proc$src/key_exp.v:40$25 in module key_exp.
Marked 1 switch rules as full_case in process $proc$src/aes256_impl.v:56$21 in module aes256_impl.
Marked 2 switch rules as full_case in process $proc$src/aes256_impl.v:46$18 in module aes256_impl.
Marked 2 switch rules as full_case in process $proc$src/aes256_impl.v:36$14 in module aes256_impl.
Removed a total of 0 dead cases.

15.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 6 redundant assignments.
Promoted 95 assignments to connections.

15.5.4. Executing PROC_INIT pass (extract init attributes).

15.5.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n in `\round_constant.$proc$src/round_constant.v:34$387'.
Found async reset \reset_n in `\round_key.$proc$src/round_key.v:31$375'.
Found async reset \reset_n in `\counters.$proc$src/counters.v:116$84'.
Found async reset \reset_n in `\counters.$proc$src/counters.v:42$76'.
Found async reset \reset_n in `\mix_columns.$proc$src/mix_columns.v:40$58'.
Found async reset \reset_n in `\sub_bytes.$proc$src/sub_bytes.v:33$53'.
Found async reset \reset_n in `\shift_rows.$proc$src/shift_rows.v:46$43'.
Found async reset \reset_n in `\key_exp.$proc$src/key_exp.v:40$25'.
Found async reset \reset_n in `\aes256_impl.$proc$src/aes256_impl.v:56$21'.
Found async reset \reset_n in `\aes256_impl.$proc$src/aes256_impl.v:46$18'.
Found async reset \reset_n in `\aes256_impl.$proc$src/aes256_impl.v:36$14'.

15.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~24 debug messages>

15.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\round_constant.$proc$src/round_constant.v:34$387'.
     1/1: $0\RC[31:0]
Creating decoders for process `\round_key.$proc$src/round_key.v:31$375'.
     1/1: $0\rnd_key[31:0]
Creating decoders for process `\sbox.$proc$src/sbox.v:0$335'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$313'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$275'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$237'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$192'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$154'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$148'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$142'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$124'.
Creating decoders for process `\counters.$proc$src/counters.v:116$84'.
     1/1: $0\rnd_cnt[3:0]
Creating decoders for process `\counters.$proc$src/counters.v:68$82'.
     1/3: $2\ready[0:0]
     2/3: $1\ready[0:0]
     3/3: $1\step[2:0]
Creating decoders for process `\counters.$proc$src/counters.v:51$78'.
     1/1: $1\next_state[2:0]
Creating decoders for process `\counters.$proc$src/counters.v:42$76'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\mix_columns.$proc$src/mix_columns.v:40$58'.
     1/2: $0\rnd_cnt_mix[3:0]
     2/2: $0\mix_in[31:0]
Creating decoders for process `\sub_bytes.$proc$src/sub_bytes.v:33$53'.
     1/1: $0\sub_in[31:0]
Creating decoders for process `\shift_rows.$proc$src/shift_rows.v:46$43'.
     1/32: $0\block_2[127:0] [63:56]
     2/32: $0\block_2[127:0] [111:104]
     3/32: $0\block_2[127:0] [7:0]
     4/32: $0\block_1[127:0] [63:56]
     5/32: $0\block_1[127:0] [111:104]
     6/32: $0\block_1[127:0] [7:0]
     7/32: $0\block_2[127:0] [95:88]
     8/32: $0\block_2[127:0] [15:8]
     9/32: $0\block_2[127:0] [39:32]
    10/32: $0\block_1[127:0] [95:88]
    11/32: $0\block_2[127:0] [87:80]
    12/32: $0\block_1[127:0] [31:24]
    13/32: $0\block_1[127:0] [39:32]
    14/32: $0\block_2[127:0] [127:120]
    15/32: $0\block_1[127:0] [55:48]
    16/32: $0\block_2[127:0] [31:24]
    17/32: $0\block_2[127:0] [47:40]
    18/32: $0\block_2[127:0] [55:48]
    19/32: $0\block_1[127:0] [127:120]
    20/32: $0\block_2[127:0] [79:72]
    21/32: $0\block_2[127:0] [119:112]
    22/32: $0\block_2[127:0] [103:96]
    23/32: $0\block_2[127:0] [23:16]
    24/32: $0\block_1[127:0] [23:16]
    25/32: $0\block_1[127:0] [87:80]
    26/32: $0\block_1[127:0] [47:40]
    27/32: $0\block_1[127:0] [15:8]
    28/32: $0\block_1[127:0] [119:112]
    29/32: $0\block_1[127:0] [79:72]
    30/32: $0\block_2[127:0] [71:64]
    31/32: $0\block_1[127:0] [103:96]
    32/32: $0\block_1[127:0] [71:64]
Creating decoders for process `\key_exp.$proc$src/key_exp.v:40$25'.
     1/25: $0\k7_rot[31:0] [31:8]
     2/25: $0\k7_rot[31:0] [7:0]
     3/25: $2\k6_next[31:0]
     4/25: $2\k5_next[31:0]
     5/25: $2\k4_next[31:0]
     6/25: $2\k3_next[31:0]
     7/25: $2\k2_next[31:0]
     8/25: $2\k1_next[31:0]
     9/25: $2\k0_next[31:0]
    10/25: $1\k7_next[31:0]
    11/25: $1\k6_next[31:0]
    12/25: $1\k5_next[31:0]
    13/25: $1\k4_next[31:0]
    14/25: $1\k3_next[31:0]
    15/25: $1\k2_next[31:0]
    16/25: $1\k1_next[31:0]
    17/25: $1\k0_next[31:0]
    18/25: $0\k0[31:0]
    19/25: $0\k6[31:0]
    20/25: $0\k5[31:0]
    21/25: $0\k3[31:0]
    22/25: $0\k2[31:0]
    23/25: $0\k1[31:0]
    24/25: $2\k7_next[31:0]
    25/25: $0\k4[31:0]
Creating decoders for process `\aes256_impl.$proc$src/aes256_impl.v:30$24'.
Creating decoders for process `\aes256_impl.$proc$src/aes256_impl.v:29$23'.
Creating decoders for process `\aes256_impl.$proc$src/aes256_impl.v:56$21'.
     1/1: $0\aes_start[0:0]
Creating decoders for process `\aes256_impl.$proc$src/aes256_impl.v:46$18'.
     1/1: $0\clk[0:0]
Creating decoders for process `\aes256_impl.$proc$src/aes256_impl.v:36$14'.
     1/1: $0\cnt_clk[6:0]

15.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\sbox.\AFFINE$func$src/sbox.v:98$103.$result' from process `\sbox.$proc$src/sbox.v:0$335'.
No latch inferred for signal `\sbox.\AFFINE$func$src/sbox.v:98$112.$result' from process `\sbox.$proc$src/sbox.v:0$335'.
No latch inferred for signal `\sbox.\AFFINE$func$src/sbox.v:98$112.data' from process `\sbox.$proc$src/sbox.v:0$335'.
No latch inferred for signal `\sbox.\GF16_TO_GF256$func$src/sbox.v:97$102.$result' from process `\sbox.$proc$src/sbox.v:0$313'.
No latch inferred for signal `\sbox.\GF16_TO_GF256$func$src/sbox.v:97$111.$result' from process `\sbox.$proc$src/sbox.v:0$313'.
No latch inferred for signal `\sbox.\GF16_TO_GF256$func$src/sbox.v:97$111.p' from process `\sbox.$proc$src/sbox.v:0$313'.
No latch inferred for signal `\sbox.\GF16_TO_GF256$func$src/sbox.v:97$111.q' from process `\sbox.$proc$src/sbox.v:0$313'.
No latch inferred for signal `\sbox.\GF16_TO_GF256$func$src/sbox.v:97$111.a' from process `\sbox.$proc$src/sbox.v:0$313'.
No latch inferred for signal `\sbox.\GF16_TO_GF256$func$src/sbox.v:97$111.b' from process `\sbox.$proc$src/sbox.v:0$313'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:82$101.$result' from process `\sbox.$proc$src/sbox.v:0$275'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:82$110.$result' from process `\sbox.$proc$src/sbox.v:0$275'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:82$110.d1' from process `\sbox.$proc$src/sbox.v:0$275'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:82$110.d2' from process `\sbox.$proc$src/sbox.v:0$275'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:82$110.a' from process `\sbox.$proc$src/sbox.v:0$275'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:82$110.b' from process `\sbox.$proc$src/sbox.v:0$275'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:81$100.$result' from process `\sbox.$proc$src/sbox.v:0$237'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:81$109.$result' from process `\sbox.$proc$src/sbox.v:0$237'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:81$109.d1' from process `\sbox.$proc$src/sbox.v:0$237'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:81$109.d2' from process `\sbox.$proc$src/sbox.v:0$237'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:81$109.a' from process `\sbox.$proc$src/sbox.v:0$237'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:81$109.b' from process `\sbox.$proc$src/sbox.v:0$237'.
No latch inferred for signal `\sbox.\INVERSE$func$src/sbox.v:79$99.$result' from process `\sbox.$proc$src/sbox.v:0$192'.
No latch inferred for signal `\sbox.\INVERSE$func$src/sbox.v:79$108.$result' from process `\sbox.$proc$src/sbox.v:0$192'.
No latch inferred for signal `\sbox.\INVERSE$func$src/sbox.v:79$108.data' from process `\sbox.$proc$src/sbox.v:0$192'.
No latch inferred for signal `\sbox.\INVERSE$func$src/sbox.v:79$108.a' from process `\sbox.$proc$src/sbox.v:0$192'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:70$98.$result' from process `\sbox.$proc$src/sbox.v:0$154'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:70$107.$result' from process `\sbox.$proc$src/sbox.v:0$154'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:70$107.d1' from process `\sbox.$proc$src/sbox.v:0$154'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:70$107.d2' from process `\sbox.$proc$src/sbox.v:0$154'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:70$107.a' from process `\sbox.$proc$src/sbox.v:0$154'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:70$107.b' from process `\sbox.$proc$src/sbox.v:0$154'.
No latch inferred for signal `\sbox.\SQUARE$func$src/sbox.v:66$97.$result' from process `\sbox.$proc$src/sbox.v:0$148'.
No latch inferred for signal `\sbox.\SQUARE$func$src/sbox.v:66$106.$result' from process `\sbox.$proc$src/sbox.v:0$148'.
No latch inferred for signal `\sbox.\SQUARE$func$src/sbox.v:66$106.data' from process `\sbox.$proc$src/sbox.v:0$148'.
No latch inferred for signal `\sbox.\SQUARE$func$src/sbox.v:65$96.$result' from process `\sbox.$proc$src/sbox.v:0$142'.
No latch inferred for signal `\sbox.\SQUARE$func$src/sbox.v:65$105.$result' from process `\sbox.$proc$src/sbox.v:0$142'.
No latch inferred for signal `\sbox.\SQUARE$func$src/sbox.v:65$105.data' from process `\sbox.$proc$src/sbox.v:0$142'.
No latch inferred for signal `\sbox.\GF256_TO_GF16$func$src/sbox.v:37$95.$result' from process `\sbox.$proc$src/sbox.v:0$124'.
No latch inferred for signal `\sbox.\GF256_TO_GF16$func$src/sbox.v:37$104.$result' from process `\sbox.$proc$src/sbox.v:0$124'.
No latch inferred for signal `\sbox.\GF256_TO_GF16$func$src/sbox.v:37$104.data' from process `\sbox.$proc$src/sbox.v:0$124'.
No latch inferred for signal `\sbox.\GF256_TO_GF16$func$src/sbox.v:37$104.a' from process `\sbox.$proc$src/sbox.v:0$124'.
No latch inferred for signal `\sbox.\GF256_TO_GF16$func$src/sbox.v:37$104.b' from process `\sbox.$proc$src/sbox.v:0$124'.
No latch inferred for signal `\sbox.\GF256_TO_GF16$func$src/sbox.v:37$104.c' from process `\sbox.$proc$src/sbox.v:0$124'.
No latch inferred for signal `\counters.\ready' from process `\counters.$proc$src/counters.v:68$82'.
No latch inferred for signal `\counters.\step' from process `\counters.$proc$src/counters.v:68$82'.
No latch inferred for signal `\counters.\next_state' from process `\counters.$proc$src/counters.v:51$78'.
No latch inferred for signal `\aes256_impl.\text_in' from process `\aes256_impl.$proc$src/aes256_impl.v:30$24'.
No latch inferred for signal `\aes256_impl.\key' from process `\aes256_impl.$proc$src/aes256_impl.v:29$23'.

15.5.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\round_constant.\RC' using process `\round_constant.$proc$src/round_constant.v:34$387'.
  created $adff cell `$procdff$882' with positive edge clock and negative level reset.
Creating register for signal `\round_key.\rnd_key' using process `\round_key.$proc$src/round_key.v:31$375'.
  created $adff cell `$procdff$883' with positive edge clock and negative level reset.
Creating register for signal `\counters.\rnd_cnt' using process `\counters.$proc$src/counters.v:116$84'.
  created $adff cell `$procdff$884' with positive edge clock and negative level reset.
Creating register for signal `\counters.\current_state' using process `\counters.$proc$src/counters.v:42$76'.
  created $adff cell `$procdff$885' with positive edge clock and negative level reset.
Creating register for signal `\mix_columns.\rnd_cnt_mix' using process `\mix_columns.$proc$src/mix_columns.v:40$58'.
  created $adff cell `$procdff$886' with positive edge clock and negative level reset.
Creating register for signal `\mix_columns.\mix_in' using process `\mix_columns.$proc$src/mix_columns.v:40$58'.
  created $adff cell `$procdff$887' with positive edge clock and negative level reset.
Creating register for signal `\sub_bytes.\sub_in' using process `\sub_bytes.$proc$src/sub_bytes.v:33$53'.
  created $adff cell `$procdff$888' with positive edge clock and negative level reset.
Creating register for signal `\shift_rows.\block_2' using process `\shift_rows.$proc$src/shift_rows.v:46$43'.
  created $adff cell `$procdff$889' with positive edge clock and negative level reset.
Creating register for signal `\shift_rows.\block_1' using process `\shift_rows.$proc$src/shift_rows.v:46$43'.
  created $adff cell `$procdff$890' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k3' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$891' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k7_rot' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$892' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k0_next' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$893' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k1_next' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$894' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k2_next' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$895' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k3_next' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$896' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k4_next' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$897' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k5_next' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$898' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k6_next' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$899' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k7_next' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$900' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k0' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$901' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k1' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$902' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k2' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$903' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k4' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$904' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k5' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$905' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k6' using process `\key_exp.$proc$src/key_exp.v:40$25'.
  created $adff cell `$procdff$906' with positive edge clock and negative level reset.
Creating register for signal `\aes256_impl.\aes_start' using process `\aes256_impl.$proc$src/aes256_impl.v:56$21'.
  created $adff cell `$procdff$907' with positive edge clock and negative level reset.
Creating register for signal `\aes256_impl.\clk' using process `\aes256_impl.$proc$src/aes256_impl.v:46$18'.
  created $adff cell `$procdff$908' with positive edge clock and negative level reset.
Creating register for signal `\aes256_impl.\cnt_clk' using process `\aes256_impl.$proc$src/aes256_impl.v:36$14'.
  created $adff cell `$procdff$909' with positive edge clock and negative level reset.

15.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

15.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\round_constant.$proc$src/round_constant.v:34$387'.
Removing empty process `round_constant.$proc$src/round_constant.v:34$387'.
Found and cleaned up 1 empty switch in `\round_key.$proc$src/round_key.v:31$375'.
Removing empty process `round_key.$proc$src/round_key.v:31$375'.
Removing empty process `sbox.$proc$src/sbox.v:0$335'.
Removing empty process `sbox.$proc$src/sbox.v:0$313'.
Removing empty process `sbox.$proc$src/sbox.v:0$275'.
Removing empty process `sbox.$proc$src/sbox.v:0$237'.
Removing empty process `sbox.$proc$src/sbox.v:0$192'.
Removing empty process `sbox.$proc$src/sbox.v:0$154'.
Removing empty process `sbox.$proc$src/sbox.v:0$148'.
Removing empty process `sbox.$proc$src/sbox.v:0$142'.
Removing empty process `sbox.$proc$src/sbox.v:0$124'.
Found and cleaned up 2 empty switches in `\counters.$proc$src/counters.v:116$84'.
Removing empty process `counters.$proc$src/counters.v:116$84'.
Found and cleaned up 2 empty switches in `\counters.$proc$src/counters.v:68$82'.
Removing empty process `counters.$proc$src/counters.v:68$82'.
Found and cleaned up 1 empty switch in `\counters.$proc$src/counters.v:51$78'.
Removing empty process `counters.$proc$src/counters.v:51$78'.
Removing empty process `counters.$proc$src/counters.v:42$76'.
Found and cleaned up 1 empty switch in `\mix_columns.$proc$src/mix_columns.v:40$58'.
Removing empty process `mix_columns.$proc$src/mix_columns.v:40$58'.
Found and cleaned up 1 empty switch in `\sub_bytes.$proc$src/sub_bytes.v:33$53'.
Removing empty process `sub_bytes.$proc$src/sub_bytes.v:33$53'.
Found and cleaned up 9 empty switches in `\shift_rows.$proc$src/shift_rows.v:46$43'.
Removing empty process `shift_rows.$proc$src/shift_rows.v:46$43'.
Found and cleaned up 4 empty switches in `\key_exp.$proc$src/key_exp.v:40$25'.
Removing empty process `key_exp.$proc$src/key_exp.v:40$25'.
Removing empty process `aes256_impl.$proc$src/aes256_impl.v:30$24'.
Removing empty process `aes256_impl.$proc$src/aes256_impl.v:29$23'.
Removing empty process `aes256_impl.$proc$src/aes256_impl.v:56$21'.
Found and cleaned up 1 empty switch in `\aes256_impl.$proc$src/aes256_impl.v:46$18'.
Removing empty process `aes256_impl.$proc$src/aes256_impl.v:46$18'.
Found and cleaned up 1 empty switch in `\aes256_impl.$proc$src/aes256_impl.v:36$14'.
Removing empty process `aes256_impl.$proc$src/aes256_impl.v:36$14'.
Cleaned up 24 empty switches.

15.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtimes.
Optimizing module MUL3.
Optimizing module byte_mix.
Optimizing module round_constant.
<suppressed ~2 debug messages>
Optimizing module round_key.
<suppressed ~10 debug messages>
Optimizing module sbox.
Optimizing module mix_w.
<suppressed ~1 debug messages>
Optimizing module counters.
<suppressed ~4 debug messages>
Optimizing module mix_columns.
<suppressed ~9 debug messages>
Optimizing module sub_bytes.
<suppressed ~2 debug messages>
Optimizing module shift_rows.
<suppressed ~29 debug messages>
Optimizing module key_exp.
<suppressed ~12 debug messages>
Optimizing module aes256_enc.
Optimizing module aes256_impl.

15.6. Executing FLATTEN pass (flatten design).
Deleting now unused module xtimes.
Deleting now unused module MUL3.
Deleting now unused module byte_mix.
Deleting now unused module round_constant.
Deleting now unused module round_key.
Deleting now unused module sbox.
Deleting now unused module mix_w.
Deleting now unused module counters.
Deleting now unused module mix_columns.
Deleting now unused module sub_bytes.
Deleting now unused module shift_rows.
Deleting now unused module key_exp.
Deleting now unused module aes256_enc.
<suppressed ~20 debug messages>

15.7. Executing TRIBUF pass.

15.8. Executing DEMINOUT pass (demote inout ports to input or output).

15.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 17 unused cells and 668 unused wires.
<suppressed ~18 debug messages>

15.11. Executing CHECK pass (checking for obvious problems).
Checking module aes256_impl...
Found and reported 0 problems.

15.12. Executing OPT pass (performing simple optimizations).

15.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
<suppressed ~546 debug messages>
Removed a total of 182 cells.

15.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\aes256_enc_u.\counters_u.$procmux$420.
Removed 1 multiplexer ports.
<suppressed ~60 debug messages>

15.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.12.6. Executing OPT_DFF pass (perform DFF optimizations).

15.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 179 unused wires.
<suppressed ~1 debug messages>

15.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.12.9. Rerunning OPT passes. (Maybe there is more to do..)

15.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~60 debug messages>

15.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.12.13. Executing OPT_DFF pass (perform DFF optimizations).

15.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.12.16. Finished OPT passes. (There is nothing left to do.)

15.13. Executing FSM pass (extract and optimize FSM).

15.13.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking aes256_impl.aes256_enc_u.counters_u.current_state as FSM state register:
    Circuit seems to be self-resetting.

15.13.2. Executing FSM_EXTRACT pass (extracting FSM from design).

15.13.3. Executing FSM_OPT pass (simple optimizations of FSMs).

15.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.13.5. Executing FSM_OPT pass (simple optimizations of FSMs).

15.13.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

15.13.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

15.13.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

15.14. Executing OPT pass (performing simple optimizations).

15.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~60 debug messages>

15.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.14.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [31:24], Q = \aes256_enc_u.shift_rows_u.block_1 [31:24]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [111:104], Q = \aes256_enc_u.shift_rows_u.block_1 [111:104]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [87:80], Q = \aes256_enc_u.shift_rows_u.block_1 [87:80]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [23:16], Q = \aes256_enc_u.shift_rows_u.block_1 [23:16]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [63:56], Q = \aes256_enc_u.shift_rows_u.block_1 [63:56]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [15:8], Q = \aes256_enc_u.shift_rows_u.block_1 [15:8]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [103:96], Q = \aes256_enc_u.shift_rows_u.block_1 [103:96]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [79:72], Q = \aes256_enc_u.shift_rows_u.block_1 [79:72]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [55:48], Q = \aes256_enc_u.shift_rows_u.block_1 [55:48]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [127:120], Q = \aes256_enc_u.shift_rows_u.block_1 [127:120]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [119:112], Q = \aes256_enc_u.shift_rows_u.block_1 [119:112]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [47:40], Q = \aes256_enc_u.shift_rows_u.block_1 [47:40]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [95:88], Q = \aes256_enc_u.shift_rows_u.block_1 [95:88]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y, Q = \aes256_enc_u.shift_rows_u.block_1 [7:0]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$procmux$768_Y, Q = \aes256_enc_u.shift_rows_u.block_1 [71:64]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$890 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y, Q = \aes256_enc_u.shift_rows_u.block_1 [39:32]).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$889 ($adff) from module aes256_impl (D = { \aes256_enc_u.key_exp_u.sub_out [15:8] \aes256_enc_u.key_exp_u.sub_out [23:16] \aes256_enc_u.key_exp_u.sub_out [31:24] \aes256_enc_u.key_exp_u.sub_out [7:0] }, Q = { \aes256_enc_u.shift_rows_u.block_2 [111:104] \aes256_enc_u.shift_rows_u.block_2 [87:80] \aes256_enc_u.shift_rows_u.block_2 [63:56] \aes256_enc_u.shift_rows_u.block_2 [7:0] }).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$889 ($adff) from module aes256_impl (D = { \aes256_enc_u.key_exp_u.sub_out [7:0] \aes256_enc_u.key_exp_u.sub_out [15:8] \aes256_enc_u.key_exp_u.sub_out [23:16] \aes256_enc_u.key_exp_u.sub_out [31:24] }, Q = { \aes256_enc_u.shift_rows_u.block_2 [103:96] \aes256_enc_u.shift_rows_u.block_2 [79:72] \aes256_enc_u.shift_rows_u.block_2 [55:48] \aes256_enc_u.shift_rows_u.block_2 [31:24] }).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$889 ($adff) from module aes256_impl (D = { \aes256_enc_u.key_exp_u.sub_out [31:24] \aes256_enc_u.key_exp_u.sub_out [7:0] \aes256_enc_u.key_exp_u.sub_out [15:8] \aes256_enc_u.key_exp_u.sub_out [23:16] }, Q = { \aes256_enc_u.shift_rows_u.block_2 [127:120] \aes256_enc_u.shift_rows_u.block_2 [71:64] \aes256_enc_u.shift_rows_u.block_2 [47:40] \aes256_enc_u.shift_rows_u.block_2 [23:16] }).
Adding EN signal on $flatten\aes256_enc_u.\shift_rows_u.$procdff$889 ($adff) from module aes256_impl (D = { \aes256_enc_u.key_exp_u.sub_out [23:16] \aes256_enc_u.key_exp_u.sub_out [31:24] \aes256_enc_u.key_exp_u.sub_out [7:0] \aes256_enc_u.key_exp_u.sub_out [15:8] }, Q = { \aes256_enc_u.shift_rows_u.block_2 [119:112] \aes256_enc_u.shift_rows_u.block_2 [95:88] \aes256_enc_u.shift_rows_u.block_2 [39:32] \aes256_enc_u.shift_rows_u.block_2 [15:8] }).
Adding EN signal on $flatten\aes256_enc_u.\mix_columns_u.$procdff$887 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\mix_columns_u.$0\mix_in[31:0], Q = \aes256_enc_u.mix_columns_u.mix_in).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procdff$883 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$0\rnd_key[31:0], Q = \aes256_enc_u.key_exp_u.round_key_u.rnd_key).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$procdff$882 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y, Q = \aes256_enc_u.key_exp_u.round_constant_u.RC).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$906 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0], Q = \aes256_enc_u.key_exp_u.k6).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$905 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0], Q = \aes256_enc_u.key_exp_u.k5).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$904 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0], Q = \aes256_enc_u.key_exp_u.k4).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$903 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0], Q = \aes256_enc_u.key_exp_u.k2).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$902 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0], Q = \aes256_enc_u.key_exp_u.k1).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$901 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0], Q = \aes256_enc_u.key_exp_u.k0).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$900 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$xor$src/key_exp.v:82$36_Y, Q = \aes256_enc_u.key_exp_u.k7_next).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$899 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$xor$src/key_exp.v:81$35_Y, Q = \aes256_enc_u.key_exp_u.k6_next).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$898 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$xor$src/key_exp.v:80$34_Y, Q = \aes256_enc_u.key_exp_u.k5_next).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$897 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$xor$src/key_exp.v:79$33_Y, Q = \aes256_enc_u.key_exp_u.k4_next).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$896 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$xor$src/key_exp.v:77$32_Y, Q = \aes256_enc_u.key_exp_u.k3_next).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$895 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$xor$src/key_exp.v:76$31_Y, Q = \aes256_enc_u.key_exp_u.k2_next).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$894 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$xor$src/key_exp.v:75$30_Y, Q = \aes256_enc_u.key_exp_u.k1_next).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$893 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$xor$src/key_exp.v:74$29_Y, Q = \aes256_enc_u.key_exp_u.k0_next).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$892 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0], Q = \aes256_enc_u.key_exp_u.k7_rot).
Adding EN signal on $flatten\aes256_enc_u.\key_exp_u.$procdff$891 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0], Q = \aes256_enc_u.key_exp_u.k3).
Adding EN signal on $flatten\aes256_enc_u.\counters_u.$procdff$884 ($adff) from module aes256_impl (D = $flatten\aes256_enc_u.\counters_u.$procmux$407_Y, Q = \aes256_enc_u.counters_u.rnd_cnt).

15.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 65 unused cells and 45 unused wires.
<suppressed ~66 debug messages>

15.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~23 debug messages>

15.14.9. Rerunning OPT passes. (Maybe there is more to do..)

15.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

15.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
<suppressed ~240 debug messages>
Removed a total of 80 cells.

15.14.13. Executing OPT_DFF pass (perform DFF optimizations).

15.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 80 unused wires.
<suppressed ~1 debug messages>

15.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.14.16. Rerunning OPT passes. (Maybe there is more to do..)

15.14.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

15.14.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.14.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.14.20. Executing OPT_DFF pass (perform DFF optimizations).

15.14.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.14.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.14.23. Finished OPT passes. (There is nothing left to do.)

15.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 7) from port B of cell aes256_impl.$eq$src/aes256_impl.v:40$16 ($eq).
Removed top 31 bits (of 32) from port B of cell aes256_impl.$add$src/aes256_impl.v:43$17 ($add).
Removed top 25 bits (of 32) from port Y of cell aes256_impl.$add$src/aes256_impl.v:43$17 ($add).
Removed top 29 bits (of 32) from port B of cell aes256_impl.$lt$src/aes256_impl.v:50$20 ($lt).
Removed top 2 bits (of 3) from port B of cell aes256_impl.$auto$opt_dff.cc:195:make_patterns_logic$923 ($ne).
Removed top 1 bits (of 3) from port B of cell aes256_impl.$auto$opt_dff.cc:195:make_patterns_logic$1018 ($ne).
Removed top 1 bits (of 3) from port B of cell aes256_impl.$auto$opt_dff.cc:195:make_patterns_logic$1007 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_impl.$auto$opt_dff.cc:195:make_patterns_logic$1005 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_impl.$auto$opt_dff.cc:195:make_patterns_logic$1038 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_impl.$auto$opt_dff.cc:195:make_patterns_logic$1031 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_impl.$auto$opt_dff.cc:195:make_patterns_logic$1052 ($ne).
Removed top 8 bits (of 32) from FF cell aes256_impl.$auto$ff.cc:266:slice$1067 ($adffe).
Removed top 1 bits (of 2) from port B of cell aes256_impl.$auto$opt_dff.cc:195:make_patterns_logic$914 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_impl.$auto$opt_dff.cc:195:make_patterns_logic$916 ($ne).
Removed top 31 bits (of 32) from port B of cell aes256_impl.$flatten\aes256_enc_u.\key_exp_u.$gt$src/key_exp.v:86$38 ($gt).
Removed top 30 bits (of 32) from port B of cell aes256_impl.$flatten\aes256_enc_u.\key_exp_u.$gt$src/key_exp.v:93$41 ($gt).
Removed top 2 bits (of 3) from port B of cell aes256_impl.$flatten\aes256_enc_u.\key_exp_u.$procmux$791_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell aes256_impl.$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$eq$src/round_constant.v:41$392 ($eq).
Removed top 1 bits (of 3) from port B of cell aes256_impl.$flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$403_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell aes256_impl.$flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$402_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell aes256_impl.$auto$opt_dff.cc:195:make_patterns_logic$1095 ($ne).
Removed top 1 bits (of 3) from port B of cell aes256_impl.$flatten\aes256_enc_u.\counters_u.$eq$src/counters.v:124$86 ($eq).
Removed top 31 bits (of 32) from port B of cell aes256_impl.$flatten\aes256_enc_u.\counters_u.$add$src/counters.v:126$88 ($add).
Removed top 28 bits (of 32) from port Y of cell aes256_impl.$flatten\aes256_enc_u.\counters_u.$add$src/counters.v:126$88 ($add).
Removed top 1 bits (of 3) from port B of cell aes256_impl.$flatten\aes256_enc_u.\counters_u.$procmux$431_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell aes256_impl.$flatten\aes256_enc_u.\counters_u.$procmux$432_CMP0 ($eq).
Removed top 25 bits (of 32) from wire aes256_impl.$add$src/aes256_impl.v:43$17_Y.
Removed top 28 bits (of 32) from wire aes256_impl.$flatten\aes256_enc_u.\counters_u.$add$src/counters.v:126$88_Y.

15.16. Executing PEEPOPT pass (run peephole optimizers).

15.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.18. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~51 debug messages>

15.19. Executing SHARE pass (SAT-based resource sharing).

15.20. Executing TECHMAP pass (map to technology primitives).

15.20.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/cmp2lut.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

15.20.2. Continuing TECHMAP pass.
Using template $paramod$106e7676feb63f00b8f79ebab3ff16b0f4c109cb\_90_lut_cmp_ for cells of type $gt.
Using template $paramod$b572544677d963e14c0b065ea224e532734f7bc9\_90_lut_cmp_ for cells of type $gt.
No more expansions possible.
<suppressed ~92 debug messages>

15.21. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

15.23. Executing TECHMAP pass (map to technology primitives).

15.23.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/mul_map.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/mul_map.v' to AST representation.
Generating RTLIL representation for module `\$__MULMXN'.
Successfully finished Verilog frontend.

15.23.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

15.24. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module aes256_impl:
  creating $macc model for $add$src/aes256_impl.v:43$17 ($add).
  creating $macc model for $flatten\aes256_enc_u.\counters_u.$add$src/counters.v:126$88 ($add).
  creating $alu model for $macc $flatten\aes256_enc_u.\counters_u.$add$src/counters.v:126$88.
  creating $alu model for $macc $add$src/aes256_impl.v:43$17.
  creating $alu model for $lt$src/aes256_impl.v:50$20 ($lt): new $alu
  creating $alu cell for $lt$src/aes256_impl.v:50$20: $auto$alumacc.cc:485:replace_alu$1178
  creating $alu cell for $add$src/aes256_impl.v:43$17: $auto$alumacc.cc:485:replace_alu$1189
  creating $alu cell for $flatten\aes256_enc_u.\counters_u.$add$src/counters.v:126$88: $auto$alumacc.cc:485:replace_alu$1192
  created 3 $alu and 0 $macc cells.

15.25. Executing OPT pass (performing simple optimizations).

15.25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~1 debug messages>

15.25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

15.25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.25.6. Executing OPT_DFF pass (perform DFF optimizations).

15.25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

15.25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.25.9. Rerunning OPT passes. (Maybe there is more to do..)

15.25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

15.25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.25.13. Executing OPT_DFF pass (perform DFF optimizations).

15.25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.25.16. Finished OPT passes. (There is nothing left to do.)

15.26. Executing MEMORY pass.

15.26.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

15.26.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

15.26.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

15.26.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

15.26.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

15.26.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.26.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

15.26.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

15.26.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.26.10. Executing MEMORY_COLLECT pass (generating $mem cells).

15.27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.28. Executing MEMORY_LIBMAP pass (mapping memories to cells).

15.29. Executing TECHMAP pass (map to technology primitives).

15.29.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/brams_map.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__CC_BRAM_TDP_'.
Generating RTLIL representation for module `\$__CC_BRAM_SDP_'.
Successfully finished Verilog frontend.

15.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

15.30. Executing OPT pass (performing simple optimizations).

15.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~91 debug messages>

15.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.30.3. Executing OPT_DFF pass (perform DFF optimizations).

15.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 1 unused cells and 42 unused wires.
<suppressed ~2 debug messages>

15.30.5. Finished fast OPT passes.

15.31. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

15.32. Executing OPT pass (performing simple optimizations).

15.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:55$79:
      Old ports: A=3'110, B=3'001, Y=$flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:55$79_Y
      New ports: A=2'10, B=2'01, Y=$flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:55$79_Y [1:0]
      New connections: $flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:55$79_Y [2] = $flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:55$79_Y [1]
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:56$80:
      Old ports: A=3'001, B=3'101, Y=$flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:56$80_Y
      New ports: A=1'0, B=1'1, Y=$flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:56$80_Y [2]
      New connections: $flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:56$80_Y [1:0] = 2'01
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:61$81:
      Old ports: A=3'101, B=3'001, Y=$flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:61$81_Y
      New ports: A=1'1, B=1'0, Y=$flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:61$81_Y [2]
      New connections: $flatten\aes256_enc_u.\counters_u.$ternary$src/counters.v:61$81_Y [1:0] = 2'01
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:0] 1'0 }, B=16777216, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:0], B=31'0000000100000000000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:1]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\mix_columns_u.$ternary$src/mix_columns.v:55$62:
      Old ports: A={ \aes256_enc_u.shift_rows_u.block_2 [127:104] \aes256_enc_u.key_exp_u.sub_out [7:0] }, B={ \aes256_enc_u.shift_rows_u.block_1 [127:104] \aes256_enc_u.key_exp_u.sub_out [7:0] }, Y=$flatten\aes256_enc_u.\mix_columns_u.$ternary$src/mix_columns.v:55$62_Y
      New ports: A=\aes256_enc_u.shift_rows_u.block_2 [127:104], B=\aes256_enc_u.shift_rows_u.block_1 [127:104], Y=$flatten\aes256_enc_u.\mix_columns_u.$ternary$src/mix_columns.v:55$62_Y [31:8]
      New connections: $flatten\aes256_enc_u.\mix_columns_u.$ternary$src/mix_columns.v:55$62_Y [7:0] = \aes256_enc_u.key_exp_u.sub_out [7:0]
  Optimizing cells in module \aes256_impl.
Performed a total of 5 changes.

15.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.6. Executing OPT_DFF pass (perform DFF optimizations).

15.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.9. Rerunning OPT passes. (Maybe there is more to do..)

15.32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1088 ($adffe) from module aes256_impl.

15.32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.16. Rerunning OPT passes. (Maybe there is more to do..)

15.32.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:1] 1'0 }, B=31'0000000100000000000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:1]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:1], B=30'000000010000000000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:2]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [1] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.20. Executing OPT_DFF pass (perform DFF optimizations).

15.32.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

15.32.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.23. Rerunning OPT passes. (Maybe there is more to do..)

15.32.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.27. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1209 ($adffe) from module aes256_impl.

15.32.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.30. Rerunning OPT passes. (Maybe there is more to do..)

15.32.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:2] 1'0 }, B=30'000000010000000000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:2]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:2], B=29'00000001000000000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:3]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [2] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.34. Executing OPT_DFF pass (perform DFF optimizations).

15.32.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.37. Rerunning OPT passes. (Maybe there is more to do..)

15.32.38. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.39. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.40. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.41. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1213 ($adffe) from module aes256_impl.

15.32.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.43. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.44. Rerunning OPT passes. (Maybe there is more to do..)

15.32.45. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.46. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:3] 1'0 }, B=29'00000001000000000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:3]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:3], B=28'0000000100000000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:4]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [3] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.48. Executing OPT_DFF pass (perform DFF optimizations).

15.32.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.51. Rerunning OPT passes. (Maybe there is more to do..)

15.32.52. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.53. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.54. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.55. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1217 ($adffe) from module aes256_impl.

15.32.56. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.57. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.58. Rerunning OPT passes. (Maybe there is more to do..)

15.32.59. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.60. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:4] 1'0 }, B=28'0000000100000000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:4]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:4], B=27'000000010000000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:5]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [4] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.61. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.62. Executing OPT_DFF pass (perform DFF optimizations).

15.32.63. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.64. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.65. Rerunning OPT passes. (Maybe there is more to do..)

15.32.66. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.67. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.68. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.69. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1221 ($adffe) from module aes256_impl.

15.32.70. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.71. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.72. Rerunning OPT passes. (Maybe there is more to do..)

15.32.73. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.74. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:5] 1'0 }, B=27'000000010000000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:5]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:5], B=26'00000001000000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:6]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [5] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.75. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.76. Executing OPT_DFF pass (perform DFF optimizations).

15.32.77. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.78. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.79. Rerunning OPT passes. (Maybe there is more to do..)

15.32.80. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.81. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.82. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.83. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1225 ($adffe) from module aes256_impl.

15.32.84. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.85. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.86. Rerunning OPT passes. (Maybe there is more to do..)

15.32.87. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.88. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:6] 1'0 }, B=26'00000001000000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:6]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:6], B=25'0000000100000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:7]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [6] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.89. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.90. Executing OPT_DFF pass (perform DFF optimizations).

15.32.91. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.92. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.93. Rerunning OPT passes. (Maybe there is more to do..)

15.32.94. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.95. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.96. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.97. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1229 ($adffe) from module aes256_impl.

15.32.98. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.99. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.100. Rerunning OPT passes. (Maybe there is more to do..)

15.32.101. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.102. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:7] 1'0 }, B=25'0000000100000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:7]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:7], B=24'000000010000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:8]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [7] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.104. Executing OPT_DFF pass (perform DFF optimizations).

15.32.105. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.106. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.107. Rerunning OPT passes. (Maybe there is more to do..)

15.32.108. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.109. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.110. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.111. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1233 ($adffe) from module aes256_impl.

15.32.112. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.113. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.114. Rerunning OPT passes. (Maybe there is more to do..)

15.32.115. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.116. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:8] 1'0 }, B=24'000000010000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:8]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:8], B=23'00000001000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:9]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [8] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.117. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.118. Executing OPT_DFF pass (perform DFF optimizations).

15.32.119. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.120. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.121. Rerunning OPT passes. (Maybe there is more to do..)

15.32.122. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.123. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.124. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.125. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1237 ($adffe) from module aes256_impl.

15.32.126. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.127. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.128. Rerunning OPT passes. (Maybe there is more to do..)

15.32.129. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.130. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:9] 1'0 }, B=23'00000001000000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:9]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:9], B=22'0000000100000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:10]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [9] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.131. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.132. Executing OPT_DFF pass (perform DFF optimizations).

15.32.133. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.134. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.135. Rerunning OPT passes. (Maybe there is more to do..)

15.32.136. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.137. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.138. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.139. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1241 ($adffe) from module aes256_impl.

15.32.140. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.141. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.142. Rerunning OPT passes. (Maybe there is more to do..)

15.32.143. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.144. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:10] 1'0 }, B=22'0000000100000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:10]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:10], B=21'000000010000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:11]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [10] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.145. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.146. Executing OPT_DFF pass (perform DFF optimizations).

15.32.147. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.148. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.149. Rerunning OPT passes. (Maybe there is more to do..)

15.32.150. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.151. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.152. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.153. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1245 ($adffe) from module aes256_impl.

15.32.154. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.155. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.156. Rerunning OPT passes. (Maybe there is more to do..)

15.32.157. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.158. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:11] 1'0 }, B=21'000000010000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:11]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:11], B=20'00000001000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:12]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [11] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.159. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.160. Executing OPT_DFF pass (perform DFF optimizations).

15.32.161. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.162. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.163. Rerunning OPT passes. (Maybe there is more to do..)

15.32.164. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.165. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.166. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.167. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1249 ($adffe) from module aes256_impl.

15.32.168. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.169. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.170. Rerunning OPT passes. (Maybe there is more to do..)

15.32.171. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.172. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:12] 1'0 }, B=20'00000001000000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:12]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:12], B=19'0000000100000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:13]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [12] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.173. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.174. Executing OPT_DFF pass (perform DFF optimizations).

15.32.175. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.176. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.177. Rerunning OPT passes. (Maybe there is more to do..)

15.32.178. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.179. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.180. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.181. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1253 ($adffe) from module aes256_impl.

15.32.182. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.183. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.184. Rerunning OPT passes. (Maybe there is more to do..)

15.32.185. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.186. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:13] 1'0 }, B=19'0000000100000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:13]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:13], B=18'000000010000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:14]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [13] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.187. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.188. Executing OPT_DFF pass (perform DFF optimizations).

15.32.189. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.190. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.191. Rerunning OPT passes. (Maybe there is more to do..)

15.32.192. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.193. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.194. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.195. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1257 ($adffe) from module aes256_impl.

15.32.196. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.197. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.198. Rerunning OPT passes. (Maybe there is more to do..)

15.32.199. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.200. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:14] 1'0 }, B=18'000000010000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:14]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:14], B=17'00000001000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:15]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [14] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.201. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.202. Executing OPT_DFF pass (perform DFF optimizations).

15.32.203. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.204. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.205. Rerunning OPT passes. (Maybe there is more to do..)

15.32.206. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.207. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.208. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.209. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1261 ($adffe) from module aes256_impl.

15.32.210. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.211. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.212. Rerunning OPT passes. (Maybe there is more to do..)

15.32.213. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.214. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:15] 1'0 }, B=17'00000001000000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:15]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:15], B=16'0000000100000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:16]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [15] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.215. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.216. Executing OPT_DFF pass (perform DFF optimizations).

15.32.217. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.218. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.219. Rerunning OPT passes. (Maybe there is more to do..)

15.32.220. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.221. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.222. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.223. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1265 ($adffe) from module aes256_impl.

15.32.224. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.225. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.226. Rerunning OPT passes. (Maybe there is more to do..)

15.32.227. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.228. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:16] 1'0 }, B=16'0000000100000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:16]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:16], B=15'000000010000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:17]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [16] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.229. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.230. Executing OPT_DFF pass (perform DFF optimizations).

15.32.231. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.232. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.233. Rerunning OPT passes. (Maybe there is more to do..)

15.32.234. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.235. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.236. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.237. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1269 ($adffe) from module aes256_impl.

15.32.238. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.239. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.240. Rerunning OPT passes. (Maybe there is more to do..)

15.32.241. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.242. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:17] 1'0 }, B=15'000000010000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:17]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:17], B=14'00000001000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:18]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [17] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.243. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.244. Executing OPT_DFF pass (perform DFF optimizations).

15.32.245. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.246. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.247. Rerunning OPT passes. (Maybe there is more to do..)

15.32.248. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.249. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.250. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.251. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1273 ($adffe) from module aes256_impl.

15.32.252. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.253. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.254. Rerunning OPT passes. (Maybe there is more to do..)

15.32.255. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.256. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:18] 1'0 }, B=14'00000001000000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:18]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:18], B=13'0000000100000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:19]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [18] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.257. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.258. Executing OPT_DFF pass (perform DFF optimizations).

15.32.259. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.260. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.261. Rerunning OPT passes. (Maybe there is more to do..)

15.32.262. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.263. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.264. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.265. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1277 ($adffe) from module aes256_impl.

15.32.266. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.267. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.268. Rerunning OPT passes. (Maybe there is more to do..)

15.32.269. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.270. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:19] 1'0 }, B=13'0000000100000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:19]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:19], B=12'000000010000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:20]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [19] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.271. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.272. Executing OPT_DFF pass (perform DFF optimizations).

15.32.273. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.274. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.275. Rerunning OPT passes. (Maybe there is more to do..)

15.32.276. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.277. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.278. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.279. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1281 ($adffe) from module aes256_impl.

15.32.280. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.281. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.282. Rerunning OPT passes. (Maybe there is more to do..)

15.32.283. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.284. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:20] 1'0 }, B=12'000000010000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:20]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:20], B=11'00000001000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:21]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [20] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.285. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.286. Executing OPT_DFF pass (perform DFF optimizations).

15.32.287. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.288. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.289. Rerunning OPT passes. (Maybe there is more to do..)

15.32.290. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.291. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.292. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.293. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1285 ($adffe) from module aes256_impl.

15.32.294. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.295. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.296. Rerunning OPT passes. (Maybe there is more to do..)

15.32.297. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.298. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:21] 1'0 }, B=11'00000001000, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:21]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:21], B=10'0000000100, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:22]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [21] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.299. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.300. Executing OPT_DFF pass (perform DFF optimizations).

15.32.301. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.302. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.303. Rerunning OPT passes. (Maybe there is more to do..)

15.32.304. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.305. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.306. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.307. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1289 ($adffe) from module aes256_impl.

15.32.308. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.309. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.310. Rerunning OPT passes. (Maybe there is more to do..)

15.32.311. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.312. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:22] 1'0 }, B=10'0000000100, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:22]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:22], B=9'000000010, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:23]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [22] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.313. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.314. Executing OPT_DFF pass (perform DFF optimizations).

15.32.315. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.316. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.317. Rerunning OPT passes. (Maybe there is more to do..)

15.32.318. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.319. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.320. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.321. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1293 ($adffe) from module aes256_impl.

15.32.322. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.323. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.324. Rerunning OPT passes. (Maybe there is more to do..)

15.32.325. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.326. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393:
      Old ports: A={ \aes256_enc_u.key_exp_u.round_constant_u.RC [30:23] 1'0 }, B=9'000000010, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:23]
      New ports: A=\aes256_enc_u.key_exp_u.round_constant_u.RC [30:23], B=8'00000001, Y=$flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31:24]
      New connections: $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [23] = 1'0
  Optimizing cells in module \aes256_impl.
Performed a total of 1 changes.

15.32.327. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.328. Executing OPT_DFF pass (perform DFF optimizations).

15.32.329. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.330. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.331. Rerunning OPT passes. (Maybe there is more to do..)

15.32.332. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.333. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.334. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.335. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1297 ($adffe) from module aes256_impl.

15.32.336. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.337. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~5 debug messages>

15.32.338. Rerunning OPT passes. (Maybe there is more to do..)

15.32.339. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.340. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.341. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.342. Executing OPT_DFF pass (perform DFF optimizations).

15.32.343. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.32.344. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.345. Rerunning OPT passes. (Maybe there is more to do..)

15.32.346. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

15.32.347. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.32.348. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.32.349. Executing OPT_DFF pass (perform DFF optimizations).

15.32.350. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.32.351. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.32.352. Finished OPT passes. (There is nothing left to do.)

15.33. Executing TECHMAP pass (map to technology primitives).

15.33.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/techmap.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

15.33.2. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/arith_map.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_gatemate_alu'.
Successfully finished Verilog frontend.

15.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_80_gatemate_alu for cells of type $alu.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_80_gatemate_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $lut.
Using template $paramod$9970e6a829a899c1fae39c88305c3c80d98a6bfd\_80_gatemate_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using template $paramod$a285b5a57fe61eabc57c91b8c412748ee1151a85\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1260 debug messages>

15.34. Executing OPT pass (performing simple optimizations).

15.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~1048 debug messages>

15.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
<suppressed ~138 debug messages>
Removed a total of 46 cells.

15.34.3. Executing OPT_DFF pass (perform DFF optimizations).

15.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 1 unused cells and 467 unused wires.
<suppressed ~2 debug messages>

15.34.5. Finished fast OPT passes.

15.35. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port aes256_impl.clk10 using CC_IBUF.
Mapping port aes256_impl.led using CC_OBUF.
Mapping port aes256_impl.reset_n using CC_IBUF.
Removed 0 unused cells and 2 unused wires.

15.36. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.37. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

15.38. Executing TECHMAP pass (map to technology primitives).

15.38.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/reg_map.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/reg_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFFE_xxxx_'.
Generating RTLIL representation for module `\$_DLATCH_xxx_'.
Successfully finished Verilog frontend.

15.38.2. Continuing TECHMAP pass.
Using template $paramod$e7538ffa59a8772e35f6a6ac594ef170009aa61b\$_DFFE_xxxx_ for cells of type $_DFFE_PN0P_.
Using template $paramod$f55baee1d1b5ee3239d6c4c3442e0f46e2ce6a2d\$_DFFE_xxxx_ for cells of type $_DFFE_PN0N_.
Using template $paramod$6c9ba52ee67087cff7348db45cdee6cff092aaba\$_DFFE_xxxx_ for cells of type $_DFFE_PN1P_.
No more expansions possible.
<suppressed ~941 debug messages>

15.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.40. Executing SIMPLEMAP pass (map simple cells to gate primitives).

15.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 5256 unused wires.
<suppressed ~1 debug messages>

15.42. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module aes256_impl..
  Treeifying 966 MUXes:
    Found tree with 1 MUXes at root $0\cnt_clk[6:0] [0].
    Found tree with 1 MUXes at root $0\cnt_clk[6:0] [1].
    Found tree with 1 MUXes at root $0\cnt_clk[6:0] [2].
    Found tree with 1 MUXes at root $0\cnt_clk[6:0] [3].
    Found tree with 1 MUXes at root $0\cnt_clk[6:0] [4].
    Found tree with 1 MUXes at root $0\cnt_clk[6:0] [5].
    Found tree with 1 MUXes at root $0\cnt_clk[6:0] [6].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [0].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [1].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [2].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [3].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [4].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [5].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [6].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [7].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [8].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [9].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [10].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [11].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [12].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [13].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [14].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [15].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [16].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [17].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [18].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [19].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [20].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [21].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [22].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [23].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [24].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [25].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [26].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [27].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [28].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [29].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [30].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [31].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [32].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [33].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [34].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [35].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [36].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [37].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [38].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [39].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [40].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [41].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [42].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [43].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [44].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [45].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [46].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [47].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [48].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [49].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [50].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [51].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [52].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [53].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [54].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [55].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [56].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [57].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [58].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [59].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [60].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [61].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [62].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [63].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [64].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [65].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [66].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [67].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [68].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [69].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [70].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [71].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [72].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [73].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [74].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [75].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [76].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [77].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [78].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [79].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [80].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [81].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [82].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [83].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [84].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [85].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [86].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [87].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [88].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [89].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [90].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [91].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [92].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [93].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [94].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [95].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [0].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [1].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [2].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [3].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [4].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [5].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [6].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [7].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [8].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [9].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [10].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [11].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [12].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [13].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [14].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [15].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [16].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [17].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [18].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [19].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [20].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [21].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [22].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [23].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [24].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [25].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [26].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [27].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [28].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [29].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [30].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [32].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [33].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [34].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [35].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [36].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [37].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [38].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [39].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [40].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [41].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [42].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [43].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [44].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [45].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [46].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [47].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [48].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [49].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [50].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [51].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [52].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [53].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [54].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [55].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [56].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [57].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [58].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [59].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [60].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [61].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [62].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [63].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [64].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [65].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [66].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [67].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [68].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [69].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [70].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [71].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [72].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [73].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [74].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [75].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [76].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [77].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [78].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [79].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [80].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [81].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [82].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [83].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [84].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [85].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [86].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [87].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [88].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [89].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [90].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [91].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [92].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [93].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [94].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [95].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [0].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [1].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [2].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [3].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [4].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [5].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [6].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [7].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [8].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [9].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [10].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [11].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [12].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [13].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [14].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [15].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [16].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [17].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [18].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [19].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [20].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [21].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [22].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [23].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [24].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [25].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [26].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [27].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [28].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [29].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [30].
    Found tree with 3 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31].
    Found tree with 1 MUXes at root \aes256_enc_u.key_exp_u.round_constant_u.step [0].
    Found tree with 1 MUXes at root \aes256_enc_u.key_exp_u.round_constant_u.step [1].
    Found tree with 1 MUXes at root \aes256_enc_u.key_exp_u.round_constant_u.step [2].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [0].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [1].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [2].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [3].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [4].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [5].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [6].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [7].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [8].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [9].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [10].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [11].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [12].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [13].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [14].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [15].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [16].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [17].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [18].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [19].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [20].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [21].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [22].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [23].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [24].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [25].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [26].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [27].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [28].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [29].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [30].
    Found tree with 1 MUXes at root \aes256_enc_u.shift_rows_u.mix_out [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [40].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [41].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [42].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [43].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [44].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [45].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [46].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [47].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [48].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [49].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [50].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [51].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [52].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [53].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [54].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [55].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [56].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [57].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [58].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [59].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [60].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [61].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [62].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [63].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [72].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [73].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [74].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [75].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [76].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [77].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [78].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [79].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [80].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [81].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [82].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [83].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [84].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [85].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [86].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [87].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [88].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [89].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [90].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [91].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [92].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [93].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [94].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [95].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [104].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [105].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [106].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [107].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [108].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [109].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [110].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [111].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [112].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [113].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [114].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [115].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [116].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [117].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [118].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [119].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [120].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [121].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [122].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [123].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [124].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [125].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [126].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [127].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [7].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [0].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [1].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [2].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [3].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [4].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [5].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [6].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [7].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [8].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [9].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [10].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [11].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [12].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [13].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [14].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [15].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [16].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [17].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [18].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [19].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [20].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [21].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [22].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [23].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [24].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [25].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [26].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [27].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [28].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [29].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [30].
    Found tree with 2 MUXes at root $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [31].
    Found tree with 1 MUXes at root \aes256_enc_u.counters_u.ready.
    Found tree with 1 MUXes at root \aes256_enc_u.counters_u.next_state [0].
    Found tree with 1 MUXes at root \aes256_enc_u.counters_u.next_state [1].
    Found tree with 1 MUXes at root \aes256_enc_u.counters_u.next_state [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\counters_u.$procmux$407_Y [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\counters_u.$procmux$407_Y [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\counters_u.$procmux$407_Y [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc_u.\counters_u.$procmux$407_Y [3].
    Found tree with 3 MUXes at root $techmap1176$flatten\aes256_enc_u.\key_exp_u.$gt$src/key_exp.v:93$41.Y.
    Found tree with 2 MUXes at root $techmap1174$flatten\aes256_enc_u.\key_exp_u.$gt$src/key_exp.v:86$38.Y.
    Finished treeification: Found 715 trees.
  Covering trees:
    Replaced tree at $0\cnt_clk[6:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_clk[6:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_clk[6:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_clk[6:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_clk[6:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_clk[6:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_clk[6:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [4]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [5]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [6]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [7]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [8]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [9]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [10]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [11]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [12]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [13]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [14]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [15]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [16]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [17]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [18]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [19]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [20]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [21]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [22]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [23]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [24]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [25]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [26]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [27]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [28]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [29]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [30]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [31]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [32]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [33]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [34]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [35]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [36]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [37]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [38]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [39]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [40]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [41]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [42]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [43]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [44]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [45]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [46]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [47]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [48]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [49]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [50]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [51]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [52]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [53]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [54]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [55]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [56]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [57]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [58]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [59]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [60]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [61]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [62]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [63]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [64]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [65]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [66]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [67]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [68]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [69]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [70]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [71]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [72]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [73]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [74]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [75]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [76]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [77]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [78]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [79]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [80]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [81]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [82]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [83]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [84]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [85]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [86]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [87]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [88]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [89]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [90]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [91]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [92]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [93]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [94]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.B [95]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [4]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [5]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [6]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [7]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [8]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [9]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [10]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [11]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [12]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [13]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [14]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [15]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [16]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [17]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [18]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [19]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [20]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [21]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [22]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [23]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [24]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [25]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [26]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [27]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [28]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [29]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [30]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\mix_columns_u.$procmux$442.Y [31]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [32]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [33]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [34]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [35]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [36]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [37]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [38]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [39]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [40]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [41]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [42]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [43]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [44]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [45]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [46]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [47]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [48]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [49]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [50]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [51]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [52]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [53]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [54]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [55]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [56]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [57]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [58]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [59]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [60]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [61]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [62]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [63]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [64]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [65]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [66]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [67]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [68]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [69]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [70]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [71]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [72]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [73]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [74]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [75]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [76]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [77]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [78]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [79]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [80]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [81]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [82]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [83]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [84]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [85]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [86]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [87]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [88]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [89]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [90]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [91]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [92]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [93]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [94]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.B [95]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [0]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [1]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [2]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [3]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [4]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [5]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [6]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [7]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [8]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [9]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [10]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [11]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [12]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [13]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [14]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [15]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [16]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [17]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [18]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [19]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [20]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [21]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [22]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [23]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [24]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [25]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [26]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [27]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [28]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [29]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [30]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_key_u.$procmux$401.Y [31]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k3[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k7_rot[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k0[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k1[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k2[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k4[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k5[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.$0\k6[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$393_Y [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.key_exp_u.round_constant_u.step [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.key_exp_u.round_constant_u.step [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.key_exp_u.round_constant_u.step [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.shift_rows_u.mix_out [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [40]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [41]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [42]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [43]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [44]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [45]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [46]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [47]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [48]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [49]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [50]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [51]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [52]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [53]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [54]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [55]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [56]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [57]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [58]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [59]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [60]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [61]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [62]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [63]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [72]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [73]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [74]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [75]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [76]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [77]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [78]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [79]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [80]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [81]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [82]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [83]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [84]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [85]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [86]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [87]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [88]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [89]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [90]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [91]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [92]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [93]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [94]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [95]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [104]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [105]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [106]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [107]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [108]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [109]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [110]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [111]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [112]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [113]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [114]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [115]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [116]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [117]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [118]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [119]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [120]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [121]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [122]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [123]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [124]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [125]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [126]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$0\block_1[127:0] [127]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$501_Y [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\shift_rows_u.$procmux$567_Y [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [4]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [5]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [6]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [7]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [8]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [9]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [10]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [11]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [12]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [13]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [14]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [15]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [16]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [17]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [18]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [19]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [20]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [21]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [22]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [23]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [24]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [25]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [26]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [27]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [28]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [29]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [30]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\sub_bytes_u.$0\sub_in[31:0] [31]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.counters_u.ready: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.counters_u.next_state [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.counters_u.next_state [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc_u.counters_u.next_state [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\counters_u.$procmux$407_Y [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\counters_u.$procmux$407_Y [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\counters_u.$procmux$407_Y [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc_u.\counters_u.$procmux$407_Y [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $techmap1176$flatten\aes256_enc_u.\key_exp_u.$gt$src/key_exp.v:93$41.Y: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $techmap1174$flatten\aes256_enc_u.\key_exp_u.$gt$src/key_exp.v:86$38.Y: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.
<suppressed ~16670 debug messages>

15.43. Executing OPT pass (performing simple optimizations).

15.43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~188 debug messages>

15.43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.43.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

15.43.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.43.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.43.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7374 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4799
        $auto$simplemap.cc:75:simplemap_bitop$4767

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7375 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4800
        $auto$simplemap.cc:75:simplemap_bitop$4768

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7376 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4801
        $auto$simplemap.cc:75:simplemap_bitop$4769

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7377 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4802
        $auto$simplemap.cc:75:simplemap_bitop$4770

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7378 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4803
        $auto$simplemap.cc:75:simplemap_bitop$4771

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7379 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4804
        $auto$simplemap.cc:75:simplemap_bitop$4772

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7380 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4805
        $auto$simplemap.cc:75:simplemap_bitop$4773

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7381 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4806
        $auto$simplemap.cc:75:simplemap_bitop$4774

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7382 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4807
        $auto$simplemap.cc:75:simplemap_bitop$4775

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7383 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4808
        $auto$simplemap.cc:75:simplemap_bitop$4776

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7384 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4809
        $auto$simplemap.cc:75:simplemap_bitop$4777

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7385 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4810
        $auto$simplemap.cc:75:simplemap_bitop$4778

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7386 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4811
        $auto$simplemap.cc:75:simplemap_bitop$4779

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7387 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4812
        $auto$simplemap.cc:75:simplemap_bitop$4780

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7388 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4813
        $auto$simplemap.cc:75:simplemap_bitop$4781

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7389 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4814
        $auto$simplemap.cc:75:simplemap_bitop$4782

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7390 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4815
        $auto$simplemap.cc:75:simplemap_bitop$4783

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7391 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4816
        $auto$simplemap.cc:75:simplemap_bitop$4784

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7392 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4817
        $auto$simplemap.cc:75:simplemap_bitop$4785

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7393 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4818
        $auto$simplemap.cc:75:simplemap_bitop$4786

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7394 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4819
        $auto$simplemap.cc:75:simplemap_bitop$4787

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7395 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4820
        $auto$simplemap.cc:75:simplemap_bitop$4788

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7396 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4821
        $auto$simplemap.cc:75:simplemap_bitop$4789

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7397 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4822
        $auto$simplemap.cc:75:simplemap_bitop$4790

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7398 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4823
        $auto$simplemap.cc:75:simplemap_bitop$4791

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7399 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4824
        $auto$simplemap.cc:75:simplemap_bitop$4792

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7400 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4825
        $auto$simplemap.cc:75:simplemap_bitop$4793

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7401 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4826
        $auto$simplemap.cc:75:simplemap_bitop$4794

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7402 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4827
        $auto$simplemap.cc:75:simplemap_bitop$4795

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7403 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4828
        $auto$simplemap.cc:75:simplemap_bitop$4796

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7404 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4829
        $auto$simplemap.cc:75:simplemap_bitop$4797

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:516:implement_best_cover$7405 in front of them:
        $auto$simplemap.cc:75:simplemap_bitop$4830
        $auto$simplemap.cc:75:simplemap_bitop$4798

15.43.7. Executing OPT_DFF pass (perform DFF optimizations).

15.43.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15.43.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.
<suppressed ~32 debug messages>

15.43.10. Rerunning OPT passes. (Maybe there is more to do..)

15.43.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

15.43.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.43.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.43.14. Executing OPT_SHARE pass.

15.43.15. Executing OPT_DFF pass (perform DFF optimizations).

15.43.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

15.43.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.43.18. Rerunning OPT passes. (Maybe there is more to do..)

15.43.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_impl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

15.43.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_impl.
Performed a total of 0 changes.

15.43.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_impl'.
Removed a total of 0 cells.

15.43.22. Executing OPT_SHARE pass.

15.43.23. Executing OPT_DFF pass (perform DFF optimizations).

15.43.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..

15.43.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_impl.

15.43.26. Finished OPT passes. (There is nothing left to do.)

15.44. Executing TECHMAP pass (map to technology primitives).

15.44.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/mux_map.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/mux_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$mux'.
Successfully finished Verilog frontend.

15.44.2. Continuing TECHMAP pass.
Using template $paramod\$mux\WIDTH=32'00000000000000000000000000000001 for cells of type $mux.
No more expansions possible.
<suppressed ~48 debug messages>

15.45. Executing ABC pass (technology mapping using ABC).

15.45.1. Extracting gate netlist of module `\aes256_impl' to `<abc-temp-dir>/input.blif'..
Extracted 2669 gates and 3590 wires to a netlist network with 919 inputs and 839 outputs.

15.45.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =    1141.
ABC: Participating nodes from both networks       =    2331.
ABC: Participating nodes from the first network   =    1140. (  77.66 % of nodes)
ABC: Participating nodes from the second network  =    1191. (  81.13 % of nodes)
ABC: Node pairs (any polarity)                    =    1140. (  77.66 % of names can be moved)
ABC: Node pairs (same polarity)                   =    1010. (  68.80 % of names can be moved)
ABC: Total runtime =     0.06 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

15.45.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     1467
ABC RESULTS:        internal signals:     1832
ABC RESULTS:           input signals:      919
ABC RESULTS:          output signals:      839
Removing temp directory.
Removed 0 unused cells and 2100 unused wires.

15.46. Executing TECHMAP pass (map to technology primitives).

15.46.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/lut_map.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

15.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101111 for cells of type $lut.
Using template $paramod$973818279bc95792902f3c09371fd2407d04a2a5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111111 for cells of type $lut.
Using template $paramod$11ec7271d8e6e5aeaace08c13e4c601f10e31038\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01101001 for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1001 for cells of type $lut.
Using template $paramod$b56193ab97821a8443232c123d95a4632f2bc92f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011000 for cells of type $lut.
Using template $paramod$4282def8dbd6df3d1248ad282c629bee684502c2\$lut for cells of type $lut.
Using template $paramod$e94afd183fcbde4c849d3e6c314d64883b2488d5\$lut for cells of type $lut.
Using template $paramod$ed8c03ad511f650cbc130404bfb483f77070eec3\$lut for cells of type $lut.
Using template $paramod$69f20e0703606f2ffd2ee27cd26f815bd5eeb6e9\$lut for cells of type $lut.
Using template $paramod$4cf5305612d86489c1a6171729557670bf08582e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01010011 for cells of type $lut.
Using template $paramod$50b99034fbf984a51c265442496081454147f31e\$lut for cells of type $lut.
Using template $paramod$80cbd08923107235732b36a5d5a7181977144217\$lut for cells of type $lut.
Using template $paramod$d4e7c5f41c66e9f0971831f7a951e2ca2a65e052\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010110 for cells of type $lut.
Using template $paramod$4d709b7796833b6cd3300ec441b403ed20a6b966\$lut for cells of type $lut.
Using template $paramod$e4d7d34a2c002a89c36ffc3bd7f5268718de0d86\$lut for cells of type $lut.
Using template $paramod$69f97d2b9c593afb411f41d5eef4c7c1dbad7a99\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod$36bf3f348cedd81cce3dc5e7a46ae0d5bdbd69b6\$lut for cells of type $lut.
Using template $paramod$454b8efc34567312349b5e94352d2af8d466ea11\$lut for cells of type $lut.
Using template $paramod$83bbac075f592f65820484d8d7c1874fa68829fa\$lut for cells of type $lut.
Using template $paramod$35ca377858e3edb82f0427a526b1b785a03e2716\$lut for cells of type $lut.
Using template $paramod$58eeb77235a0ca2f890419ea9319cfc4bcd0f07d\$lut for cells of type $lut.
Using template $paramod$c80a3f83d1d118a21306c2531f1e4f6fe24b9819\$lut for cells of type $lut.
Using template $paramod$89aa7763f6237564cc9c49e885c10d294c9b4634\$lut for cells of type $lut.
Using template $paramod$7d7a4daebacd1b0953bba09a5fde0e48eea4243b\$lut for cells of type $lut.
Using template $paramod$3bcd6314de23180573ecc5a7e6c63581f0c5beef\$lut for cells of type $lut.
Using template $paramod$8325551c3691d78723fd30a88650e7ae3a677045\$lut for cells of type $lut.
Using template $paramod$a49123d498c133daff33f4d5d64f78ffef9a3126\$lut for cells of type $lut.
Using template $paramod$ef4aaec3351547fbcdb9f051d81a405aedf72d1c\$lut for cells of type $lut.
Using template $paramod$2bdfdda73873e8931790d872b72220895e67fee5\$lut for cells of type $lut.
Using template $paramod$77a79c63321da6f25f9b54063a156fd8ed6af952\$lut for cells of type $lut.
Using template $paramod$700ba979c586efa306699c3cf15f053ab3a45ad6\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000001 for cells of type $lut.
Using template $paramod$9ce3cb48532e1935dedb6055756fefa71d90eef1\$lut for cells of type $lut.
Using template $paramod$4adb41216162ad4c68ce9ea5c48385c753262ac3\$lut for cells of type $lut.
Using template $paramod$3c17fcbb332f03cef33f214b93f1f99815920a16\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01100000 for cells of type $lut.
Using template $paramod$e7244e840f9a6c9da523ae8c48e5f9d31613f643\$lut for cells of type $lut.
Using template $paramod$3917289e65f71c63931890b1b9cd3c08fc2b12e1\$lut for cells of type $lut.
Using template $paramod$58c29e7af6dc818c4a30bad17ed8950e78ff01e2\$lut for cells of type $lut.
Using template $paramod$400e70ab40bc034f95288d674157da21bbd1fd4b\$lut for cells of type $lut.
Using template $paramod$8f212b370354d343e14396ede06a80047cd292e2\$lut for cells of type $lut.
Using template $paramod$fbc7065e252ed45ec9bbbda32b83198d0867676a\$lut for cells of type $lut.
Using template $paramod$80bc945f6d438f16387422ec284dc12b4bb4e68f\$lut for cells of type $lut.
Using template $paramod$fbef11ace9bdbdedce6b366d076918a7489d2f67\$lut for cells of type $lut.
Using template $paramod$6a34cd5b50e324824168b4186d0b04ba5e83b039\$lut for cells of type $lut.
Using template $paramod$0a94662b0161fc067fc2a1123fd5ac94da2ec1db\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$608f40069c27841a5b3bdf03643a34bdc8974072\$lut for cells of type $lut.
Using template $paramod$1843b3c15f2447d117e2d5de9b00f791ef5f9fa3\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod$2848c0169edb042c24b987f0e4007a50c6156217\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100001 for cells of type $lut.
Using template $paramod$1f3b67373a23476b64a6ed61bde9dbe9df1086de\$lut for cells of type $lut.
Using template $paramod$fd9405f61f13dd38ee130991e59b27f185cc37a0\$lut for cells of type $lut.
Using template $paramod$9cebf52e4fcf1dcaa9ed6b426eb71d5e49f8aa70\$lut for cells of type $lut.
Using template $paramod$32698b63fedf17a0ddd735c22c8980c62f1954ba\$lut for cells of type $lut.
Using template $paramod$803fbaff5781f29195e52cf1b357ed1d66ddd49d\$lut for cells of type $lut.
Using template $paramod$fa125010cf85399fd8e18644a3e1b0aa42b40bc8\$lut for cells of type $lut.
Using template $paramod$388ce53cafe674e7154fca52e06716dd24ba1ef3\$lut for cells of type $lut.
Using template $paramod$c52d79bcb4d842449922136bcdbfa6c1c5e8c282\$lut for cells of type $lut.
Using template $paramod$db8f450e6662991ef955879419e948046224222e\$lut for cells of type $lut.
Using template $paramod$1dc1ebf58638f2b5a7bd16d3cbf70d85280d0255\$lut for cells of type $lut.
Using template $paramod$948dd2ffa030d5b4f89d0bac81e2525d9a86122d\$lut for cells of type $lut.
Using template $paramod$17f089f553d7320d017a901fa3167e27a641122e\$lut for cells of type $lut.
Using template $paramod$1a64f21ea15b05b7fc930804a66f6689ebbd6394\$lut for cells of type $lut.
Using template $paramod$02124d42e8a5a4220d8c8e1235a8790f30076968\$lut for cells of type $lut.
Using template $paramod$54756d69c261463ec49196fb4cde40841edda089\$lut for cells of type $lut.
Using template $paramod$2d41e84d8a20fdfcf9ef269ad61c0ae8747d3e8f\$lut for cells of type $lut.
Using template $paramod$24b16eab211886921e3b9a68b37126506914b071\$lut for cells of type $lut.
Using template $paramod$21c681aae93c226cfbb227673a4e20ceb48574a6\$lut for cells of type $lut.
Using template $paramod$c7df3d9de0223fb4b5ea6e591b1a78664b27497a\$lut for cells of type $lut.
Using template $paramod$ff172dfd2f5fbe9de760fe0ebe2b7c7412eb8835\$lut for cells of type $lut.
Using template $paramod$cd579e4730c9b7a644643074bc4253c884ccd819\$lut for cells of type $lut.
Using template $paramod$79f4d1e0abbd3be5cec5270278b479f7ed9990f9\$lut for cells of type $lut.
Using template $paramod$137b06d4b29e6f2a39a254e3f620395b0ced7182\$lut for cells of type $lut.
Using template $paramod$7793f7418d8761863bd40a3483119b0278d0943b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$2d8ecce5c907513cebcd38ab5efe0fc26fc03464\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000111 for cells of type $lut.
Using template $paramod$bba54c1ef87367812b4c15f4aed5ac70773df775\$lut for cells of type $lut.
Using template $paramod$5a621b016c894274d07edef48c49b401a15fd796\$lut for cells of type $lut.
Using template $paramod$179512a187da069f3b79ef6612a41e494e7d54b6\$lut for cells of type $lut.
Using template $paramod$6e46ec5a196ba1a24b8e69ab094cadc07c13ac1f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110000 for cells of type $lut.
Using template $paramod$f3e1547c4b47e64c590e75cf09078b2507c8cc75\$lut for cells of type $lut.
Using template $paramod$a50be0e6fa3a01511bb234559cb74fb8bd3e2061\$lut for cells of type $lut.
Using template $paramod$e49f6e3576ef1a6d2f58c54414dbb786af8cc869\$lut for cells of type $lut.
Using template $paramod$53ce561f80f32d4298a3beadc88b6c5c78293221\$lut for cells of type $lut.
Using template $paramod$82ac4228e04c92c7b8c133bfa256dd480e0cef1d\$lut for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod$b3edabc7dcffb9333202c2dc81870276564d7aa9\$lut for cells of type $lut.
Using template $paramod$12e9049d8709286a770fe60b59ec4d94c39ce3c9\$lut for cells of type $lut.
Using template $paramod$332a399730bfc61adea04021a76b1c4e4030f37d\$lut for cells of type $lut.
Using template $paramod$391f41f25d1fefdc245c798e53651a23e79db55a\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011111 for cells of type $lut.
Using template $paramod$c1a19a87ccbbb03d43a72335db63f692ddf82cc1\$lut for cells of type $lut.
Using template $paramod$7be893b882a6ffdbd9417ea3c8258c5f3652b124\$lut for cells of type $lut.
Using template $paramod$bc796d1b37e47fe5b469d545b097ef86bfd034b1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110001 for cells of type $lut.
Using template $paramod$f740ebdda65cd0b8323d705f16d6dbb0d2771805\$lut for cells of type $lut.
Using template $paramod$a2d691ba21e093558f2a36669ee489fbccffbcd3\$lut for cells of type $lut.
Using template $paramod$b431bfd938e35871dd0b7668e1503c7e8b9d491c\$lut for cells of type $lut.
Using template $paramod$575b200168b9e109c2ed99df4359056f2c6696ac\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110100 for cells of type $lut.
Using template $paramod$ab8bb87959c5d7cfa27886cee1355b38e054a61a\$lut for cells of type $lut.
Using template $paramod$8c4e95796f7b245519a4dd5f42ae45cbb0b83692\$lut for cells of type $lut.
Using template $paramod$d97bfcb4c7209f0a42d65dba5d99b3e61b0525e6\$lut for cells of type $lut.
Using template $paramod$a26e2ce23dd197ee2c88a87600ea29af872f3a60\$lut for cells of type $lut.
Using template $paramod$6b6967672cddfbe12dea2c030f112bffb1ec18d1\$lut for cells of type $lut.
Using template $paramod$d35161d1d7976dcc02e7c7d51172431be85143b4\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~3108 debug messages>
Removed 0 unused cells and 3244 unused wires.

15.47. Executing CLKBUFMAP pass (inserting clock buffers).
Inserting CC_BUFG on aes256_impl.$iopadmap$clk10[0].
Inserting CC_BUFG on aes256_impl.clk[0].

15.48. Executing HIERARCHY pass (managing design hierarchy).

15.48.1. Analyzing design hierarchy..
Top module:  \aes256_impl

15.48.2. Analyzing design hierarchy..
Top module:  \aes256_impl
Removed 0 unused modules.

15.49. Printing statistics.

=== aes256_impl ===

   Number of wires:               1336
   Number of wire bits:           6708
   Number of public wires:         275
   Number of public wire bits:    4451
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2404
     CC_ADDF                        17
     CC_BUFG                         2
     CC_DFF                        876
     CC_IBUF                         2
     CC_LUT1                         6
     CC_LUT2                       509
     CC_LUT3                       224
     CC_LUT4                       728
     CC_MX2                         32
     CC_OBUF                         8

15.50. Executing CHECK pass (checking for obvious problems).
Checking module aes256_impl...
Found and reported 0 problems.

15.51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_impl..
Removed 0 unused cells and 234 unused wires.
<suppressed ~234 debug messages>

15.52. Executing Verilog backend.

15.52.1. Executing BMUXMAP pass.

15.52.2. Executing DEMUXMAP pass.
Dumping module `\aes256_impl'.

End of script. Logfile hash: 6ebde881cb, CPU: user 3.98s system 0.01s, MEM: 40.70 MB peak
Yosys 0.29+42 (git sha1 2004a9ff4, g++ 12.2.1 -Os)
Time spent: 26% 71x opt_expr (1 sec), 17% 72x opt_clean (0 sec), ...
