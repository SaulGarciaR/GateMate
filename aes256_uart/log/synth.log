
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.24 (git sha1 313b7997b, g++ 12.2.0 -Os)


-- Running command `ghdl --warn-no-binding -C --ieee=synopsys src/serial_tx.vhd -e serial_tx; ghdl --warn-no-binding -C --ieee=synopsys src/serial_rx.vhd -e serial_rx; read -sv src/mix_columns.v src/MUL3.v src/mix_w.v src/sbox.v src/counters.v src/shift_rows.v src/round_constant.v src/key_exp.v src/aes256_uart.v src/aes256_enc.v src/round_key.v src/sub_bytes.v src/byte_mix.v src/xtimes.v; synth_gatemate -top aes256_uart -nomx8 -vlog net/aes256_uart_synth.v' --

1. Executing GHDL.
Importing module serial_tx.

2. Executing GHDL.
Importing module serial_rx.

3. Executing Verilog-2005 frontend: src/mix_columns.v
Parsing SystemVerilog input from `src/mix_columns.v' to AST representation.
Storing AST representation for module `$abstract\mix_columns'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: src/MUL3.v
Parsing SystemVerilog input from `src/MUL3.v' to AST representation.
Storing AST representation for module `$abstract\MUL3'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: src/mix_w.v
Parsing SystemVerilog input from `src/mix_w.v' to AST representation.
Storing AST representation for module `$abstract\mix_w'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: src/sbox.v
Parsing SystemVerilog input from `src/sbox.v' to AST representation.
Storing AST representation for module `$abstract\sbox'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: src/counters.v
Parsing SystemVerilog input from `src/counters.v' to AST representation.
Storing AST representation for module `$abstract\counters'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: src/shift_rows.v
Parsing SystemVerilog input from `src/shift_rows.v' to AST representation.
Storing AST representation for module `$abstract\shift_rows'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: src/round_constant.v
Parsing SystemVerilog input from `src/round_constant.v' to AST representation.
Storing AST representation for module `$abstract\round_constant'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: src/key_exp.v
Parsing SystemVerilog input from `src/key_exp.v' to AST representation.
Storing AST representation for module `$abstract\key_exp'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: src/aes256_uart.v
Parsing SystemVerilog input from `src/aes256_uart.v' to AST representation.
Storing AST representation for module `$abstract\aes256_uart'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: src/aes256_enc.v
Parsing SystemVerilog input from `src/aes256_enc.v' to AST representation.
Storing AST representation for module `$abstract\aes256_enc'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: src/round_key.v
Parsing SystemVerilog input from `src/round_key.v' to AST representation.
Storing AST representation for module `$abstract\round_key'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: src/sub_bytes.v
Parsing SystemVerilog input from `src/sub_bytes.v' to AST representation.
Storing AST representation for module `$abstract\sub_bytes'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: src/byte_mix.v
Parsing SystemVerilog input from `src/byte_mix.v' to AST representation.
Storing AST representation for module `$abstract\byte_mix'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: src/xtimes.v
Parsing SystemVerilog input from `src/xtimes.v' to AST representation.
Storing AST representation for module `$abstract\xtimes'.
Successfully finished Verilog frontend.

17. Executing SYNTH_GATEMATE pass.

17.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/cells_sim.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\CC_IBUF'.
Generating RTLIL representation for module `\CC_OBUF'.
Generating RTLIL representation for module `\CC_TOBUF'.
Generating RTLIL representation for module `\CC_IOBUF'.
Generating RTLIL representation for module `\CC_LVDS_IBUF'.
Generating RTLIL representation for module `\CC_LVDS_OBUF'.
Generating RTLIL representation for module `\CC_LVDS_TOBUF'.
Generating RTLIL representation for module `\CC_LVDS_IOBUF'.
Generating RTLIL representation for module `\CC_IDDR'.
Generating RTLIL representation for module `\CC_ODDR'.
Generating RTLIL representation for module `\CC_DFF'.
Generating RTLIL representation for module `\CC_DLT'.
Generating RTLIL representation for module `\CC_LUT1'.
Generating RTLIL representation for module `\CC_LUT2'.
Generating RTLIL representation for module `\CC_LUT3'.
Generating RTLIL representation for module `\CC_LUT4'.
Generating RTLIL representation for module `\CC_MX2'.
Generating RTLIL representation for module `\CC_MX4'.
Generating RTLIL representation for module `\CC_MX8'.
Generating RTLIL representation for module `\CC_ADDF'.
Generating RTLIL representation for module `\CC_MULT'.
Generating RTLIL representation for module `\CC_BUFG'.
Generating RTLIL representation for module `\CC_BRAM_20K'.
Generating RTLIL representation for module `\CC_BRAM_40K'.
Generating RTLIL representation for module `\CC_L2T4'.
Generating RTLIL representation for module `\CC_L2T5'.
Successfully finished Verilog frontend.

17.2. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/cells_bb.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\CC_PLL'.
Generating RTLIL representation for module `\CC_PLL_ADV'.
Generating RTLIL representation for module `\CC_SERDES'.
Generating RTLIL representation for module `\CC_CFG_CTRL'.
Generating RTLIL representation for module `\CC_FIFO_40K'.
Successfully finished Verilog frontend.

17.3. Executing HIERARCHY pass (managing design hierarchy).

17.4. Executing AST frontend in derive mode using pre-parsed AST for module `\aes256_uart'.
Generating RTLIL representation for module `\aes256_uart'.

17.4.1. Analyzing design hierarchy..
Top module:  \aes256_uart
Used module:     \serial_tx
Used module:     \serial_rx

17.4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\aes256_enc'.
Generating RTLIL representation for module `\aes256_enc'.

17.4.3. Analyzing design hierarchy..
Top module:  \aes256_uart
Used module:     \serial_tx
Used module:     \serial_rx
Used module:     \aes256_enc

17.4.4. Executing AST frontend in derive mode using pre-parsed AST for module `\key_exp'.
Generating RTLIL representation for module `\key_exp'.

17.4.5. Executing AST frontend in derive mode using pre-parsed AST for module `\shift_rows'.
Generating RTLIL representation for module `\shift_rows'.

17.4.6. Executing AST frontend in derive mode using pre-parsed AST for module `\sub_bytes'.
Generating RTLIL representation for module `\sub_bytes'.

17.4.7. Executing AST frontend in derive mode using pre-parsed AST for module `\mix_columns'.
Generating RTLIL representation for module `\mix_columns'.

17.4.8. Executing AST frontend in derive mode using pre-parsed AST for module `\counters'.
Generating RTLIL representation for module `\counters'.
Note: Assuming pure combinatorial block at src/counters.v:51.1-65.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at src/counters.v:68.1-114.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.

17.4.9. Analyzing design hierarchy..
Top module:  \aes256_uart
Used module:     \serial_tx
Used module:     \serial_rx
Used module:     \aes256_enc
Used module:         \key_exp
Used module:         \shift_rows
Used module:         \sub_bytes
Used module:         \mix_columns
Used module:         \counters

17.4.10. Executing AST frontend in derive mode using pre-parsed AST for module `\mix_w'.
Generating RTLIL representation for module `\mix_w'.

17.4.11. Executing AST frontend in derive mode using pre-parsed AST for module `\sbox'.
Generating RTLIL representation for module `\sbox'.

17.4.12. Executing AST frontend in derive mode using pre-parsed AST for module `\round_key'.
Generating RTLIL representation for module `\round_key'.

17.4.13. Executing AST frontend in derive mode using pre-parsed AST for module `\round_constant'.
Generating RTLIL representation for module `\round_constant'.

17.4.14. Analyzing design hierarchy..
Top module:  \aes256_uart
Used module:     \serial_tx
Used module:     \serial_rx
Used module:     \aes256_enc
Used module:         \key_exp
Used module:             \round_key
Used module:             \round_constant
Used module:         \shift_rows
Used module:         \sub_bytes
Used module:             \sbox
Used module:         \mix_columns
Used module:             \mix_w
Used module:         \counters

17.4.15. Executing AST frontend in derive mode using pre-parsed AST for module `\byte_mix'.
Generating RTLIL representation for module `\byte_mix'.

17.4.16. Analyzing design hierarchy..
Top module:  \aes256_uart
Used module:     \serial_tx
Used module:     \serial_rx
Used module:     \aes256_enc
Used module:         \key_exp
Used module:             \round_key
Used module:             \round_constant
Used module:         \shift_rows
Used module:         \sub_bytes
Used module:             \sbox
Used module:         \mix_columns
Used module:             \mix_w
Used module:                 \byte_mix
Used module:         \counters

17.4.17. Executing AST frontend in derive mode using pre-parsed AST for module `\MUL3'.
Generating RTLIL representation for module `\MUL3'.

17.4.18. Executing AST frontend in derive mode using pre-parsed AST for module `\xtimes'.
Generating RTLIL representation for module `\xtimes'.

17.4.19. Analyzing design hierarchy..
Top module:  \aes256_uart
Used module:     \serial_tx
Used module:     \serial_rx
Used module:     \aes256_enc
Used module:         \key_exp
Used module:             \round_key
Used module:             \round_constant
Used module:         \shift_rows
Used module:         \sub_bytes
Used module:             \sbox
Used module:         \mix_columns
Used module:             \mix_w
Used module:                 \byte_mix
Used module:                     \MUL3
Used module:                         \xtimes
Used module:         \counters

17.4.20. Analyzing design hierarchy..
Top module:  \aes256_uart
Used module:     \serial_tx
Used module:     \serial_rx
Used module:     \aes256_enc
Used module:         \key_exp
Used module:             \round_key
Used module:             \round_constant
Used module:         \shift_rows
Used module:         \sub_bytes
Used module:             \sbox
Used module:         \mix_columns
Used module:             \mix_w
Used module:                 \byte_mix
Used module:                     \MUL3
Used module:                         \xtimes
Used module:         \counters
Removing unused module `$abstract\xtimes'.
Removing unused module `$abstract\byte_mix'.
Removing unused module `$abstract\sub_bytes'.
Removing unused module `$abstract\round_key'.
Removing unused module `$abstract\aes256_enc'.
Removing unused module `$abstract\aes256_uart'.
Removing unused module `$abstract\key_exp'.
Removing unused module `$abstract\round_constant'.
Removing unused module `$abstract\shift_rows'.
Removing unused module `$abstract\counters'.
Removing unused module `$abstract\sbox'.
Removing unused module `$abstract\mix_w'.
Removing unused module `$abstract\MUL3'.
Removing unused module `$abstract\mix_columns'.
Removed 14 unused modules.
Mapping positional arguments of cell sub_bytes.sbox3_u (sbox).
Mapping positional arguments of cell sub_bytes.sbox2_u (sbox).
Mapping positional arguments of cell sub_bytes.sbox1_u (sbox).
Mapping positional arguments of cell sub_bytes.sbox0_u (sbox).
Mapping positional arguments of cell key_exp.round_key_u (round_key).
Mapping positional arguments of cell key_exp.round_constant_u (round_constant).
Mapping positional arguments of cell aes256_enc.key_exp_u (key_exp).
Mapping positional arguments of cell aes256_enc.shift_rows_u (shift_rows).
Mapping positional arguments of cell aes256_enc.sub_bytes_u (sub_bytes).
Mapping positional arguments of cell aes256_enc.mix_columns_u (mix_columns).
Mapping positional arguments of cell aes256_enc.counters_u (counters).

17.5. Executing PROC pass (convert processes to netlists).

17.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

17.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$src/round_constant.v:34$520 in module round_constant.
Marked 1 switch rules as full_case in process $proc$src/round_key.v:31$508 in module round_key.
Marked 2 switch rules as full_case in process $proc$src/counters.v:116$217 in module counters.
Marked 2 switch rules as full_case in process $proc$src/counters.v:68$215 in module counters.
Marked 1 switch rules as full_case in process $proc$src/counters.v:51$211 in module counters.
Marked 1 switch rules as full_case in process $proc$src/counters.v:42$209 in module counters.
Marked 1 switch rules as full_case in process $proc$src/mix_columns.v:40$191 in module mix_columns.
Marked 2 switch rules as full_case in process $proc$src/sub_bytes.v:33$186 in module sub_bytes.
Marked 8 switch rules as full_case in process $proc$src/shift_rows.v:46$176 in module shift_rows.
Marked 2 switch rules as full_case in process $proc$src/key_exp.v:40$158 in module key_exp.
Marked 2 switch rules as full_case in process $proc$src/aes256_uart.v:229$147 in module aes256_uart.
Marked 2 switch rules as full_case in process $proc$src/aes256_uart.v:216$143 in module aes256_uart.
Marked 2 switch rules as full_case in process $proc$src/aes256_uart.v:181$106 in module aes256_uart.
Marked 2 switch rules as full_case in process $proc$src/aes256_uart.v:112$101 in module aes256_uart.
Marked 4 switch rules as full_case in process $proc$src/aes256_uart.v:88$93 in module aes256_uart.
Removed a total of 0 dead cases.

17.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 93 assignments to connections.

17.5.4. Executing PROC_INIT pass (extract init attributes).

17.5.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n in `\round_constant.$proc$src/round_constant.v:34$520'.
Found async reset \reset_n in `\round_key.$proc$src/round_key.v:31$508'.
Found async reset \reset_n in `\counters.$proc$src/counters.v:116$217'.
Found async reset \reset_n in `\counters.$proc$src/counters.v:42$209'.
Found async reset \reset_n in `\mix_columns.$proc$src/mix_columns.v:40$191'.
Found async reset \reset_n in `\sub_bytes.$proc$src/sub_bytes.v:33$186'.
Found async reset \reset_n in `\shift_rows.$proc$src/shift_rows.v:46$176'.
Found async reset \reset_n in `\key_exp.$proc$src/key_exp.v:40$158'.
Found async reset \reset_n in `\aes256_uart.$proc$src/aes256_uart.v:229$147'.
Found async reset \reset_n in `\aes256_uart.$proc$src/aes256_uart.v:216$143'.
Found async reset \reset_n in `\aes256_uart.$proc$src/aes256_uart.v:181$106'.
Found async reset \reset_n in `\aes256_uart.$proc$src/aes256_uart.v:112$101'.
Found async reset \reset_n in `\aes256_uart.$proc$src/aes256_uart.v:88$93'.

17.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~34 debug messages>

17.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\round_constant.$proc$src/round_constant.v:34$520'.
     1/1: $0\RC[31:0]
Creating decoders for process `\round_key.$proc$src/round_key.v:31$508'.
     1/1: $0\rnd_key[31:0]
Creating decoders for process `\sbox.$proc$src/sbox.v:0$468'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$446'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$408'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$370'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$325'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$287'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$281'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$275'.
Creating decoders for process `\sbox.$proc$src/sbox.v:0$257'.
Creating decoders for process `\counters.$proc$src/counters.v:116$217'.
     1/1: $0\rnd_cnt[3:0]
Creating decoders for process `\counters.$proc$src/counters.v:68$215'.
     1/3: $2\ready[0:0]
     2/3: $1\ready[0:0]
     3/3: $1\step[2:0]
Creating decoders for process `\counters.$proc$src/counters.v:51$211'.
     1/1: $1\next_state[2:0]
Creating decoders for process `\counters.$proc$src/counters.v:42$209'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\mix_columns.$proc$src/mix_columns.v:40$191'.
     1/2: $0\rnd_cnt_mix[3:0]
     2/2: $0\mix_in[31:0]
Creating decoders for process `\sub_bytes.$proc$src/sub_bytes.v:33$186'.
     1/1: $0\sub_in[31:0]
Creating decoders for process `\shift_rows.$proc$src/shift_rows.v:46$176'.
     1/32: $0\block_2[127:0] [63:56]
     2/32: $0\block_2[127:0] [111:104]
     3/32: $0\block_2[127:0] [7:0]
     4/32: $0\block_1[127:0] [63:56]
     5/32: $0\block_1[127:0] [111:104]
     6/32: $0\block_1[127:0] [7:0]
     7/32: $0\block_2[127:0] [95:88]
     8/32: $0\block_2[127:0] [15:8]
     9/32: $0\block_2[127:0] [39:32]
    10/32: $0\block_1[127:0] [95:88]
    11/32: $0\block_2[127:0] [87:80]
    12/32: $0\block_1[127:0] [31:24]
    13/32: $0\block_1[127:0] [39:32]
    14/32: $0\block_2[127:0] [127:120]
    15/32: $0\block_1[127:0] [55:48]
    16/32: $0\block_2[127:0] [31:24]
    17/32: $0\block_2[127:0] [47:40]
    18/32: $0\block_2[127:0] [55:48]
    19/32: $0\block_1[127:0] [127:120]
    20/32: $0\block_2[127:0] [79:72]
    21/32: $0\block_2[127:0] [119:112]
    22/32: $0\block_2[127:0] [103:96]
    23/32: $0\block_2[127:0] [23:16]
    24/32: $0\block_1[127:0] [23:16]
    25/32: $0\block_1[127:0] [87:80]
    26/32: $0\block_1[127:0] [47:40]
    27/32: $0\block_1[127:0] [15:8]
    28/32: $0\block_1[127:0] [119:112]
    29/32: $0\block_1[127:0] [79:72]
    30/32: $0\block_2[127:0] [71:64]
    31/32: $0\block_1[127:0] [103:96]
    32/32: $0\block_1[127:0] [71:64]
Creating decoders for process `\key_exp.$proc$src/key_exp.v:40$158'.
     1/25: $0\k7_rot[31:0] [31:8]
     2/25: $0\k7_rot[31:0] [7:0]
     3/25: $2\k6_next[31:0]
     4/25: $2\k5_next[31:0]
     5/25: $2\k4_next[31:0]
     6/25: $2\k3_next[31:0]
     7/25: $2\k2_next[31:0]
     8/25: $2\k1_next[31:0]
     9/25: $2\k0_next[31:0]
    10/25: $1\k7_next[31:0]
    11/25: $1\k6_next[31:0]
    12/25: $1\k5_next[31:0]
    13/25: $1\k4_next[31:0]
    14/25: $1\k3_next[31:0]
    15/25: $1\k2_next[31:0]
    16/25: $1\k1_next[31:0]
    17/25: $1\k0_next[31:0]
    18/25: $0\k0[31:0]
    19/25: $0\k6[31:0]
    20/25: $0\k5[31:0]
    21/25: $0\k3[31:0]
    22/25: $0\k2[31:0]
    23/25: $0\k1[31:0]
    24/25: $2\k7_next[31:0]
    25/25: $0\k4[31:0]
Creating decoders for process `\aes256_uart.$proc$src/aes256_uart.v:229$147'.
     1/1: $0\cnt_tx[4:0]
Creating decoders for process `\aes256_uart.$proc$src/aes256_uart.v:216$143'.
     1/1: $0\cnt_rx[5:0]
Creating decoders for process `\aes256_uart.$proc$src/aes256_uart.v:181$106'.
     1/2: $0\tx_start[0:0]
     2/2: $0\tx_byte[7:0]
Creating decoders for process `\aes256_uart.$proc$src/aes256_uart.v:112$101'.
     1/49: $0\text_in[127:0] [127:120]
     2/49: $0\text_in[127:0] [119:112]
     3/49: $0\text_in[127:0] [111:104]
     4/49: $0\text_in[127:0] [103:96]
     5/49: $0\text_in[127:0] [95:88]
     6/49: $0\text_in[127:0] [87:80]
     7/49: $0\text_in[127:0] [79:72]
     8/49: $0\text_in[127:0] [71:64]
     9/49: $0\text_in[127:0] [63:56]
    10/49: $0\text_in[127:0] [55:48]
    11/49: $0\text_in[127:0] [47:40]
    12/49: $0\text_in[127:0] [39:32]
    13/49: $0\text_in[127:0] [31:24]
    14/49: $0\text_in[127:0] [23:16]
    15/49: $0\text_in[127:0] [15:8]
    16/49: $0\text_in[127:0] [7:0]
    17/49: $0\key[255:0] [247:240]
    18/49: $0\key[255:0] [239:232]
    19/49: $0\key[255:0] [231:224]
    20/49: $0\key[255:0] [223:216]
    21/49: $0\key[255:0] [215:208]
    22/49: $0\key[255:0] [207:200]
    23/49: $0\key[255:0] [199:192]
    24/49: $0\key[255:0] [191:184]
    25/49: $0\key[255:0] [183:176]
    26/49: $0\key[255:0] [175:168]
    27/49: $0\key[255:0] [167:160]
    28/49: $0\key[255:0] [159:152]
    29/49: $0\key[255:0] [151:144]
    30/49: $0\key[255:0] [143:136]
    31/49: $0\key[255:0] [135:128]
    32/49: $0\key[255:0] [127:120]
    33/49: $0\key[255:0] [119:112]
    34/49: $0\key[255:0] [111:104]
    35/49: $0\key[255:0] [103:96]
    36/49: $0\key[255:0] [95:88]
    37/49: $0\key[255:0] [87:80]
    38/49: $0\key[255:0] [79:72]
    39/49: $0\key[255:0] [71:64]
    40/49: $0\key[255:0] [63:56]
    41/49: $0\key[255:0] [55:48]
    42/49: $0\key[255:0] [47:40]
    43/49: $0\key[255:0] [39:32]
    44/49: $0\key[255:0] [31:24]
    45/49: $0\key[255:0] [23:16]
    46/49: $0\key[255:0] [15:8]
    47/49: $0\key[255:0] [7:0]
    48/49: $0\key[255:0] [255:248]
    49/49: $0\aes_start[0:0]
Creating decoders for process `\aes256_uart.$proc$src/aes256_uart.v:88$93'.
     1/1: $0\current_state[2:0]

17.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\sbox.\AFFINE$func$src/sbox.v:98$236.$result' from process `\sbox.$proc$src/sbox.v:0$468'.
No latch inferred for signal `\sbox.\AFFINE$func$src/sbox.v:98$245.$result' from process `\sbox.$proc$src/sbox.v:0$468'.
No latch inferred for signal `\sbox.\AFFINE$func$src/sbox.v:98$245.data' from process `\sbox.$proc$src/sbox.v:0$468'.
No latch inferred for signal `\sbox.\GF16_TO_GF256$func$src/sbox.v:97$235.$result' from process `\sbox.$proc$src/sbox.v:0$446'.
No latch inferred for signal `\sbox.\GF16_TO_GF256$func$src/sbox.v:97$244.$result' from process `\sbox.$proc$src/sbox.v:0$446'.
No latch inferred for signal `\sbox.\GF16_TO_GF256$func$src/sbox.v:97$244.p' from process `\sbox.$proc$src/sbox.v:0$446'.
No latch inferred for signal `\sbox.\GF16_TO_GF256$func$src/sbox.v:97$244.q' from process `\sbox.$proc$src/sbox.v:0$446'.
No latch inferred for signal `\sbox.\GF16_TO_GF256$func$src/sbox.v:97$244.a' from process `\sbox.$proc$src/sbox.v:0$446'.
No latch inferred for signal `\sbox.\GF16_TO_GF256$func$src/sbox.v:97$244.b' from process `\sbox.$proc$src/sbox.v:0$446'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:82$234.$result' from process `\sbox.$proc$src/sbox.v:0$408'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:82$243.$result' from process `\sbox.$proc$src/sbox.v:0$408'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:82$243.d1' from process `\sbox.$proc$src/sbox.v:0$408'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:82$243.d2' from process `\sbox.$proc$src/sbox.v:0$408'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:82$243.a' from process `\sbox.$proc$src/sbox.v:0$408'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:82$243.b' from process `\sbox.$proc$src/sbox.v:0$408'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:81$233.$result' from process `\sbox.$proc$src/sbox.v:0$370'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:81$242.$result' from process `\sbox.$proc$src/sbox.v:0$370'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:81$242.d1' from process `\sbox.$proc$src/sbox.v:0$370'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:81$242.d2' from process `\sbox.$proc$src/sbox.v:0$370'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:81$242.a' from process `\sbox.$proc$src/sbox.v:0$370'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:81$242.b' from process `\sbox.$proc$src/sbox.v:0$370'.
No latch inferred for signal `\sbox.\INVERSE$func$src/sbox.v:79$232.$result' from process `\sbox.$proc$src/sbox.v:0$325'.
No latch inferred for signal `\sbox.\INVERSE$func$src/sbox.v:79$241.$result' from process `\sbox.$proc$src/sbox.v:0$325'.
No latch inferred for signal `\sbox.\INVERSE$func$src/sbox.v:79$241.data' from process `\sbox.$proc$src/sbox.v:0$325'.
No latch inferred for signal `\sbox.\INVERSE$func$src/sbox.v:79$241.a' from process `\sbox.$proc$src/sbox.v:0$325'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:70$231.$result' from process `\sbox.$proc$src/sbox.v:0$287'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:70$240.$result' from process `\sbox.$proc$src/sbox.v:0$287'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:70$240.d1' from process `\sbox.$proc$src/sbox.v:0$287'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:70$240.d2' from process `\sbox.$proc$src/sbox.v:0$287'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:70$240.a' from process `\sbox.$proc$src/sbox.v:0$287'.
No latch inferred for signal `\sbox.\MUL$func$src/sbox.v:70$240.b' from process `\sbox.$proc$src/sbox.v:0$287'.
No latch inferred for signal `\sbox.\SQUARE$func$src/sbox.v:66$230.$result' from process `\sbox.$proc$src/sbox.v:0$281'.
No latch inferred for signal `\sbox.\SQUARE$func$src/sbox.v:66$239.$result' from process `\sbox.$proc$src/sbox.v:0$281'.
No latch inferred for signal `\sbox.\SQUARE$func$src/sbox.v:66$239.data' from process `\sbox.$proc$src/sbox.v:0$281'.
No latch inferred for signal `\sbox.\SQUARE$func$src/sbox.v:65$229.$result' from process `\sbox.$proc$src/sbox.v:0$275'.
No latch inferred for signal `\sbox.\SQUARE$func$src/sbox.v:65$238.$result' from process `\sbox.$proc$src/sbox.v:0$275'.
No latch inferred for signal `\sbox.\SQUARE$func$src/sbox.v:65$238.data' from process `\sbox.$proc$src/sbox.v:0$275'.
No latch inferred for signal `\sbox.\GF256_TO_GF16$func$src/sbox.v:37$228.$result' from process `\sbox.$proc$src/sbox.v:0$257'.
No latch inferred for signal `\sbox.\GF256_TO_GF16$func$src/sbox.v:37$237.$result' from process `\sbox.$proc$src/sbox.v:0$257'.
No latch inferred for signal `\sbox.\GF256_TO_GF16$func$src/sbox.v:37$237.data' from process `\sbox.$proc$src/sbox.v:0$257'.
No latch inferred for signal `\sbox.\GF256_TO_GF16$func$src/sbox.v:37$237.a' from process `\sbox.$proc$src/sbox.v:0$257'.
No latch inferred for signal `\sbox.\GF256_TO_GF16$func$src/sbox.v:37$237.b' from process `\sbox.$proc$src/sbox.v:0$257'.
No latch inferred for signal `\sbox.\GF256_TO_GF16$func$src/sbox.v:37$237.c' from process `\sbox.$proc$src/sbox.v:0$257'.
No latch inferred for signal `\counters.\ready' from process `\counters.$proc$src/counters.v:68$215'.
No latch inferred for signal `\counters.\step' from process `\counters.$proc$src/counters.v:68$215'.
No latch inferred for signal `\counters.\next_state' from process `\counters.$proc$src/counters.v:51$211'.

17.5.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\round_constant.\RC' using process `\round_constant.$proc$src/round_constant.v:34$520'.
  created $adff cell `$procdff$2414' with positive edge clock and negative level reset.
Creating register for signal `\round_key.\rnd_key' using process `\round_key.$proc$src/round_key.v:31$508'.
  created $adff cell `$procdff$2415' with positive edge clock and negative level reset.
Creating register for signal `\counters.\rnd_cnt' using process `\counters.$proc$src/counters.v:116$217'.
  created $adff cell `$procdff$2416' with positive edge clock and negative level reset.
Creating register for signal `\counters.\current_state' using process `\counters.$proc$src/counters.v:42$209'.
  created $adff cell `$procdff$2417' with positive edge clock and negative level reset.
Creating register for signal `\mix_columns.\rnd_cnt_mix' using process `\mix_columns.$proc$src/mix_columns.v:40$191'.
  created $adff cell `$procdff$2418' with positive edge clock and negative level reset.
Creating register for signal `\mix_columns.\mix_in' using process `\mix_columns.$proc$src/mix_columns.v:40$191'.
  created $adff cell `$procdff$2419' with positive edge clock and negative level reset.
Creating register for signal `\sub_bytes.\sub_in' using process `\sub_bytes.$proc$src/sub_bytes.v:33$186'.
  created $adff cell `$procdff$2420' with positive edge clock and negative level reset.
Creating register for signal `\shift_rows.\block_2' using process `\shift_rows.$proc$src/shift_rows.v:46$176'.
  created $adff cell `$procdff$2421' with positive edge clock and negative level reset.
Creating register for signal `\shift_rows.\block_1' using process `\shift_rows.$proc$src/shift_rows.v:46$176'.
  created $adff cell `$procdff$2422' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k3' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2423' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k7_rot' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2424' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k0_next' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2425' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k1_next' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2426' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k2_next' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2427' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k3_next' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2428' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k4_next' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2429' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k5_next' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2430' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k6_next' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2431' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k7_next' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2432' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k0' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2433' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k1' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2434' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k2' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2435' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k4' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2436' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k5' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2437' with positive edge clock and negative level reset.
Creating register for signal `\key_exp.\k6' using process `\key_exp.$proc$src/key_exp.v:40$158'.
  created $adff cell `$procdff$2438' with positive edge clock and negative level reset.
Creating register for signal `\aes256_uart.\cnt_tx' using process `\aes256_uart.$proc$src/aes256_uart.v:229$147'.
  created $adff cell `$procdff$2439' with positive edge clock and negative level reset.
Creating register for signal `\aes256_uart.\cnt_rx' using process `\aes256_uart.$proc$src/aes256_uart.v:216$143'.
  created $adff cell `$procdff$2440' with positive edge clock and negative level reset.
Creating register for signal `\aes256_uart.\tx_byte' using process `\aes256_uart.$proc$src/aes256_uart.v:181$106'.
  created $adff cell `$procdff$2441' with positive edge clock and negative level reset.
Creating register for signal `\aes256_uart.\tx_start' using process `\aes256_uart.$proc$src/aes256_uart.v:181$106'.
  created $adff cell `$procdff$2442' with positive edge clock and negative level reset.
Creating register for signal `\aes256_uart.\aes_start' using process `\aes256_uart.$proc$src/aes256_uart.v:112$101'.
  created $adff cell `$procdff$2443' with positive edge clock and negative level reset.
Creating register for signal `\aes256_uart.\key' using process `\aes256_uart.$proc$src/aes256_uart.v:112$101'.
  created $adff cell `$procdff$2444' with positive edge clock and negative level reset.
Creating register for signal `\aes256_uart.\text_in' using process `\aes256_uart.$proc$src/aes256_uart.v:112$101'.
  created $adff cell `$procdff$2445' with positive edge clock and negative level reset.
Creating register for signal `\aes256_uart.\current_state' using process `\aes256_uart.$proc$src/aes256_uart.v:88$93'.
  created $adff cell `$procdff$2446' with positive edge clock and negative level reset.

17.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

17.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\round_constant.$proc$src/round_constant.v:34$520'.
Removing empty process `round_constant.$proc$src/round_constant.v:34$520'.
Found and cleaned up 1 empty switch in `\round_key.$proc$src/round_key.v:31$508'.
Removing empty process `round_key.$proc$src/round_key.v:31$508'.
Removing empty process `sbox.$proc$src/sbox.v:0$468'.
Removing empty process `sbox.$proc$src/sbox.v:0$446'.
Removing empty process `sbox.$proc$src/sbox.v:0$408'.
Removing empty process `sbox.$proc$src/sbox.v:0$370'.
Removing empty process `sbox.$proc$src/sbox.v:0$325'.
Removing empty process `sbox.$proc$src/sbox.v:0$287'.
Removing empty process `sbox.$proc$src/sbox.v:0$281'.
Removing empty process `sbox.$proc$src/sbox.v:0$275'.
Removing empty process `sbox.$proc$src/sbox.v:0$257'.
Found and cleaned up 2 empty switches in `\counters.$proc$src/counters.v:116$217'.
Removing empty process `counters.$proc$src/counters.v:116$217'.
Found and cleaned up 2 empty switches in `\counters.$proc$src/counters.v:68$215'.
Removing empty process `counters.$proc$src/counters.v:68$215'.
Found and cleaned up 1 empty switch in `\counters.$proc$src/counters.v:51$211'.
Removing empty process `counters.$proc$src/counters.v:51$211'.
Removing empty process `counters.$proc$src/counters.v:42$209'.
Found and cleaned up 1 empty switch in `\mix_columns.$proc$src/mix_columns.v:40$191'.
Removing empty process `mix_columns.$proc$src/mix_columns.v:40$191'.
Found and cleaned up 1 empty switch in `\sub_bytes.$proc$src/sub_bytes.v:33$186'.
Removing empty process `sub_bytes.$proc$src/sub_bytes.v:33$186'.
Found and cleaned up 9 empty switches in `\shift_rows.$proc$src/shift_rows.v:46$176'.
Removing empty process `shift_rows.$proc$src/shift_rows.v:46$176'.
Found and cleaned up 4 empty switches in `\key_exp.$proc$src/key_exp.v:40$158'.
Removing empty process `key_exp.$proc$src/key_exp.v:40$158'.
Found and cleaned up 2 empty switches in `\aes256_uart.$proc$src/aes256_uart.v:229$147'.
Removing empty process `aes256_uart.$proc$src/aes256_uart.v:229$147'.
Found and cleaned up 2 empty switches in `\aes256_uart.$proc$src/aes256_uart.v:216$143'.
Removing empty process `aes256_uart.$proc$src/aes256_uart.v:216$143'.
Found and cleaned up 2 empty switches in `\aes256_uart.$proc$src/aes256_uart.v:181$106'.
Removing empty process `aes256_uart.$proc$src/aes256_uart.v:181$106'.
Found and cleaned up 3 empty switches in `\aes256_uart.$proc$src/aes256_uart.v:112$101'.
Removing empty process `aes256_uart.$proc$src/aes256_uart.v:112$101'.
Found and cleaned up 3 empty switches in `\aes256_uart.$proc$src/aes256_uart.v:88$93'.
Removing empty process `aes256_uart.$proc$src/aes256_uart.v:88$93'.
Cleaned up 34 empty switches.

17.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module xtimes.
Optimizing module MUL3.
Optimizing module byte_mix.
Optimizing module round_constant.
<suppressed ~2 debug messages>
Optimizing module round_key.
<suppressed ~10 debug messages>
Optimizing module sbox.
Optimizing module mix_w.
<suppressed ~1 debug messages>
Optimizing module counters.
<suppressed ~4 debug messages>
Optimizing module mix_columns.
<suppressed ~9 debug messages>
Optimizing module sub_bytes.
<suppressed ~2 debug messages>
Optimizing module shift_rows.
<suppressed ~29 debug messages>
Optimizing module key_exp.
<suppressed ~12 debug messages>
Optimizing module aes256_enc.
Optimizing module aes256_uart.
<suppressed ~4 debug messages>
Optimizing module serial_rx.
<suppressed ~4 debug messages>
Optimizing module serial_tx.
<suppressed ~5 debug messages>

17.6. Executing FLATTEN pass (flatten design).
Deleting now unused module xtimes.
Deleting now unused module MUL3.
Deleting now unused module byte_mix.
Deleting now unused module round_constant.
Deleting now unused module round_key.
Deleting now unused module sbox.
Deleting now unused module mix_w.
Deleting now unused module counters.
Deleting now unused module mix_columns.
Deleting now unused module sub_bytes.
Deleting now unused module shift_rows.
Deleting now unused module key_exp.
Deleting now unused module aes256_enc.
Deleting now unused module serial_rx.
Deleting now unused module serial_tx.
<suppressed ~22 debug messages>

17.7. Executing TRIBUF pass.

17.8. Executing DEMINOUT pass (demote inout ports to input or output).

17.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~18 debug messages>

17.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 22 unused cells and 812 unused wires.
<suppressed ~26 debug messages>

17.11. Executing CHECK pass (checking for obvious problems).
Checking module aes256_uart...
Found and reported 0 problems.

17.12. Executing OPT pass (performing simple optimizations).

17.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
<suppressed ~588 debug messages>
Removed a total of 196 cells.

17.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\aes256_enc.\counters_u.$procmux$553.
Removed 1 multiplexer ports.
<suppressed ~126 debug messages>

17.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    New ctrl vector for $pmux cell \serial_rx_u.50: { $flatten\serial_rx_u.$auto$ghdl.cc:805:import_module$67 $flatten\serial_rx_u.$auto$ghdl.cc:805:import_module$55 $flatten\serial_rx_u.$auto$ghdl.cc:805:import_module$50 }
    New ctrl vector for $pmux cell \serial_rx_u.52: { $flatten\serial_rx_u.$auto$ghdl.cc:805:import_module$67 $flatten\serial_rx_u.$auto$ghdl.cc:805:import_module$50 }
    New ctrl vector for $pmux cell \serial_rx_u.53: $flatten\serial_rx_u.$auto$ghdl.cc:805:import_module$67
    New ctrl vector for $pmux cell \serial_rx_u.55: $flatten\serial_rx_u.$auto$ghdl.cc:805:import_module$67
    New ctrl vector for $pmux cell \serial_tx_u.60: { $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$23 $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$8 }
    New ctrl vector for $pmux cell \serial_tx_u.61: { $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$23 $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$8 }
    New ctrl vector for $pmux cell \serial_tx_u.66: { $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$23 $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$13 }
    New ctrl vector for $pmux cell \serial_tx_u.72: $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$8
  Optimizing cells in module \aes256_uart.
Performed a total of 8 changes.

17.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

17.12.6. Executing OPT_DFF pass (perform DFF optimizations).

17.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 194 unused wires.
<suppressed ~1 debug messages>

17.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.12.9. Rerunning OPT passes. (Maybe there is more to do..)

17.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~126 debug messages>

17.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    New ctrl vector for $pmux cell \serial_tx_u.59: { $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$27 $auto$opt_reduce.cc:134:opt_pmux$2448 $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$8 }
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.12.13. Executing OPT_DFF pass (perform DFF optimizations).

17.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.12.16. Rerunning OPT passes. (Maybe there is more to do..)

17.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~126 debug messages>

17.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.12.20. Executing OPT_DFF pass (perform DFF optimizations).

17.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.12.23. Finished OPT passes. (There is nothing left to do.)

17.13. Executing FSM pass (extract and optimize FSM).

17.13.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking aes256_uart.aes256_enc.counters_u.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking aes256_uart.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking aes256_uart.serial_rx_u.state_q as FSM state register:
    Circuit seems to be self-resetting.
Not marking aes256_uart.serial_tx_u.state_q as FSM state register:
    Circuit seems to be self-resetting.

17.13.2. Executing FSM_EXTRACT pass (extracting FSM from design).

17.13.3. Executing FSM_OPT pass (simple optimizations of FSMs).

17.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.13.5. Executing FSM_OPT pass (simple optimizations of FSMs).

17.13.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

17.13.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

17.13.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

17.14. Executing OPT pass (performing simple optimizations).

17.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~126 debug messages>

17.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.14.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on serial_tx_u.98 ($dff) from module aes256_uart (D = \serial_tx_u.bit_ctr_d, Q = \serial_tx_u.bit_ctr_q).
Adding EN signal on serial_tx_u.95 ($dff) from module aes256_uart (D = \serial_tx_u.ctr_d, Q = \serial_tx_u.ctr_q).
Adding EN signal on serial_tx_u.92 ($adff) from module aes256_uart (D = \serial_tx_u.state_d, Q = \serial_tx_u.state_q).
Adding EN signal on serial_tx_u.105 ($dff) from module aes256_uart (D = 1'0, Q = \serial_tx_u.block_q).
Adding EN signal on serial_tx_u.101 ($dff) from module aes256_uart (D = \serial_tx_u.data_d, Q = \serial_tx_u.data_q).
Adding EN signal on serial_rx_u.86 ($dff) from module aes256_uart (D = \data_in, Q = \serial_rx_u.rx_q).
Adding EN signal on serial_rx_u.82 ($dff) from module aes256_uart (D = { \serial_rx_u.rx_q \serial_rx_u.data_q [7:1] }, Q = \serial_rx_u.data_q).
Adding EN signal on serial_rx_u.79 ($adff) from module aes256_uart (D = \serial_rx_u.bit_ctr_d, Q = \serial_rx_u.bit_ctr_q).
Adding EN signal on serial_rx_u.78 ($adff) from module aes256_uart (D = \serial_rx_u.ctr_d, Q = \serial_rx_u.ctr_q).
Adding EN signal on serial_rx_u.77 ($adff) from module aes256_uart (D = \serial_rx_u.state_d, Q = \serial_rx_u.state_q).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [127:120]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [119:112]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [111:104]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [103:96]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [95:88]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [87:80]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [79:72]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [71:64]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [63:56]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [55:48]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [47:40]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [39:32]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [31:24]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [23:16]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [15:8]).
Adding EN signal on $procdff$2445 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \text_in [7:0]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [247:240]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [239:232]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [231:224]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [223:216]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [215:208]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [207:200]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [199:192]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [191:184]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [183:176]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [175:168]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [167:160]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [159:152]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [151:144]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [143:136]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [135:128]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [127:120]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [119:112]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [111:104]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [103:96]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [95:88]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [87:80]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [79:72]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [71:64]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [63:56]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [55:48]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [47:40]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [39:32]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [31:24]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [23:16]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [15:8]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [7:0]).
Adding EN signal on $procdff$2444 ($adff) from module aes256_uart (D = \serial_rx_u.data_q, Q = \key [255:248]).
Adding EN signal on $procdff$2443 ($adff) from module aes256_uart (D = $0\aes_start[0:0], Q = \aes_start).
Adding EN signal on $procdff$2442 ($adff) from module aes256_uart (D = $0\tx_start[0:0], Q = \tx_start).
Adding EN signal on $procdff$2441 ($adff) from module aes256_uart (D = $ternary$src/aes256_uart.v:191$141_Y, Q = \tx_byte).
Adding EN signal on $procdff$2440 ($adff) from module aes256_uart (D = $0\cnt_rx[5:0], Q = \cnt_rx).
Adding EN signal on $procdff$2439 ($adff) from module aes256_uart (D = $0\cnt_tx[4:0], Q = \cnt_tx).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [111:104], Q = \aes256_enc.shift_rows_u.block_1 [111:104]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [103:96], Q = \aes256_enc.shift_rows_u.block_1 [103:96]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [127:120], Q = \aes256_enc.shift_rows_u.block_1 [127:120]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [119:112], Q = \aes256_enc.shift_rows_u.block_1 [119:112]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [31:24], Q = \aes256_enc.shift_rows_u.block_1 [31:24]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [87:80], Q = \aes256_enc.shift_rows_u.block_1 [87:80]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [23:16], Q = \aes256_enc.shift_rows_u.block_1 [23:16]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [63:56], Q = \aes256_enc.shift_rows_u.block_1 [63:56]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [15:8], Q = \aes256_enc.shift_rows_u.block_1 [15:8]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [79:72], Q = \aes256_enc.shift_rows_u.block_1 [79:72]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [55:48], Q = \aes256_enc.shift_rows_u.block_1 [55:48]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [47:40], Q = \aes256_enc.shift_rows_u.block_1 [47:40]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [95:88], Q = \aes256_enc.shift_rows_u.block_1 [95:88]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y, Q = \aes256_enc.shift_rows_u.block_1 [7:0]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$procmux$901_Y, Q = \aes256_enc.shift_rows_u.block_1 [71:64]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2422 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y, Q = \aes256_enc.shift_rows_u.block_1 [39:32]).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2421 ($adff) from module aes256_uart (D = { \aes256_enc.key_exp_u.sub_out [15:8] \aes256_enc.key_exp_u.sub_out [23:16] \aes256_enc.key_exp_u.sub_out [31:24] \aes256_enc.key_exp_u.sub_out [7:0] }, Q = { \aes256_enc.shift_rows_u.block_2 [111:104] \aes256_enc.shift_rows_u.block_2 [87:80] \aes256_enc.shift_rows_u.block_2 [63:56] \aes256_enc.shift_rows_u.block_2 [7:0] }).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2421 ($adff) from module aes256_uart (D = { \aes256_enc.key_exp_u.sub_out [7:0] \aes256_enc.key_exp_u.sub_out [15:8] \aes256_enc.key_exp_u.sub_out [23:16] \aes256_enc.key_exp_u.sub_out [31:24] }, Q = { \aes256_enc.shift_rows_u.block_2 [103:96] \aes256_enc.shift_rows_u.block_2 [79:72] \aes256_enc.shift_rows_u.block_2 [55:48] \aes256_enc.shift_rows_u.block_2 [31:24] }).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2421 ($adff) from module aes256_uart (D = { \aes256_enc.key_exp_u.sub_out [31:24] \aes256_enc.key_exp_u.sub_out [7:0] \aes256_enc.key_exp_u.sub_out [15:8] \aes256_enc.key_exp_u.sub_out [23:16] }, Q = { \aes256_enc.shift_rows_u.block_2 [127:120] \aes256_enc.shift_rows_u.block_2 [71:64] \aes256_enc.shift_rows_u.block_2 [47:40] \aes256_enc.shift_rows_u.block_2 [23:16] }).
Adding EN signal on $flatten\aes256_enc.\shift_rows_u.$procdff$2421 ($adff) from module aes256_uart (D = { \aes256_enc.key_exp_u.sub_out [23:16] \aes256_enc.key_exp_u.sub_out [31:24] \aes256_enc.key_exp_u.sub_out [7:0] \aes256_enc.key_exp_u.sub_out [15:8] }, Q = { \aes256_enc.shift_rows_u.block_2 [119:112] \aes256_enc.shift_rows_u.block_2 [95:88] \aes256_enc.shift_rows_u.block_2 [39:32] \aes256_enc.shift_rows_u.block_2 [15:8] }).
Adding EN signal on $flatten\aes256_enc.\mix_columns_u.$procdff$2419 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\mix_columns_u.$0\mix_in[31:0], Q = \aes256_enc.mix_columns_u.mix_in).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.\round_key_u.$procdff$2415 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.\round_key_u.$0\rnd_key[31:0], Q = \aes256_enc.key_exp_u.round_key_u.rnd_key).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.\round_constant_u.$procdff$2414 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y, Q = \aes256_enc.key_exp_u.round_constant_u.RC).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2438 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$0\k6[31:0], Q = \aes256_enc.key_exp_u.k6).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2437 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$0\k5[31:0], Q = \aes256_enc.key_exp_u.k5).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2436 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$0\k4[31:0], Q = \aes256_enc.key_exp_u.k4).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2435 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$0\k2[31:0], Q = \aes256_enc.key_exp_u.k2).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2434 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$0\k1[31:0], Q = \aes256_enc.key_exp_u.k1).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2433 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$0\k0[31:0], Q = \aes256_enc.key_exp_u.k0).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2432 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$xor$src/key_exp.v:82$169_Y, Q = \aes256_enc.key_exp_u.k7_next).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2431 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$xor$src/key_exp.v:81$168_Y, Q = \aes256_enc.key_exp_u.k6_next).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2430 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$xor$src/key_exp.v:80$167_Y, Q = \aes256_enc.key_exp_u.k5_next).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2429 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$xor$src/key_exp.v:79$166_Y, Q = \aes256_enc.key_exp_u.k4_next).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2428 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$xor$src/key_exp.v:77$165_Y, Q = \aes256_enc.key_exp_u.k3_next).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2427 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$xor$src/key_exp.v:76$164_Y, Q = \aes256_enc.key_exp_u.k2_next).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2426 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$xor$src/key_exp.v:75$163_Y, Q = \aes256_enc.key_exp_u.k1_next).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2425 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$xor$src/key_exp.v:74$162_Y, Q = \aes256_enc.key_exp_u.k0_next).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2424 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0], Q = \aes256_enc.key_exp_u.k7_rot).
Adding EN signal on $flatten\aes256_enc.\key_exp_u.$procdff$2423 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\key_exp_u.$0\k3[31:0], Q = \aes256_enc.key_exp_u.k3).
Adding EN signal on $flatten\aes256_enc.\counters_u.$procdff$2416 ($adff) from module aes256_uart (D = $flatten\aes256_enc.\counters_u.$procmux$540_Y, Q = \aes256_enc.counters_u.rnd_cnt).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$2478 ($dffe) from module aes256_uart.

17.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 162 unused cells and 98 unused wires.
<suppressed ~164 debug messages>

17.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~42 debug messages>

17.14.9. Rerunning OPT passes. (Maybe there is more to do..)

17.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~51 debug messages>

17.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2489: { $auto$opt_dff.cc:194:make_patterns_logic$2484 $auto$opt_dff.cc:194:make_patterns_logic$2482 $auto$opt_dff.cc:194:make_patterns_logic$2480 \reset_n }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2477: { $auto$opt_dff.cc:194:make_patterns_logic$2472 $auto$opt_dff.cc:194:make_patterns_logic$2470 $auto$opt_dff.cc:194:make_patterns_logic$2468 $auto$opt_dff.cc:194:make_patterns_logic$2466 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2464: { $auto$opt_dff.cc:194:make_patterns_logic$2459 \reset_n }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2457: { $auto$opt_dff.cc:194:make_patterns_logic$2452 $auto$opt_dff.cc:194:make_patterns_logic$2450 \reset_n }
  Optimizing cells in module \aes256_uart.
Performed a total of 4 changes.

17.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
<suppressed ~240 debug messages>
Removed a total of 80 cells.

17.14.13. Executing OPT_DFF pass (perform DFF optimizations).

17.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 89 unused wires.
<suppressed ~1 debug messages>

17.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~1 debug messages>

17.14.16. Rerunning OPT passes. (Maybe there is more to do..)

17.14.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux \serial_tx_u.72.
    dead port 2/2 on $mux \serial_tx_u.72.
Removed 2 multiplexer ports.
<suppressed ~59 debug messages>

17.14.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.14.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.14.20. Executing OPT_DFF pass (perform DFF optimizations).

17.14.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 4 unused wires.
<suppressed ~4 debug messages>

17.14.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.14.23. Rerunning OPT passes. (Maybe there is more to do..)

17.14.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

17.14.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.14.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.14.27. Executing OPT_DFF pass (perform DFF optimizations).

17.14.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.14.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.14.30. Finished OPT passes. (There is nothing left to do.)

17.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 5 bits (of 6) from mux cell aes256_uart.$ternary$src/aes256_uart.v:95$95 ($mux).
Removed top 4 bits (of 6) from mux cell aes256_uart.$ternary$src/aes256_uart.v:96$96 ($mux).
Removed top 2 bits (of 3) from port B of cell aes256_uart.$eq$src/aes256_uart.v:176$105 ($eq).
Removed top 1 bits (of 3) from port B of cell aes256_uart.$eq$src/aes256_uart.v:189$108 ($eq).
Removed top 4 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:192$110 ($eq).
Removed top 3 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:193$111 ($eq).
Removed top 3 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:194$112 ($eq).
Removed top 2 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:195$113 ($eq).
Removed top 2 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:196$114 ($eq).
Removed top 2 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:197$115 ($eq).
Removed top 2 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:198$116 ($eq).
Removed top 1 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:199$117 ($eq).
Removed top 1 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:200$118 ($eq).
Removed top 1 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:201$119 ($eq).
Removed top 1 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:202$120 ($eq).
Removed top 1 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:203$121 ($eq).
Removed top 1 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:204$122 ($eq).
Removed top 1 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:205$123 ($eq).
Removed top 1 bits (of 5) from port B of cell aes256_uart.$eq$src/aes256_uart.v:206$124 ($eq).
Removed top 7 bits (of 8) from port B of cell aes256_uart.$le$src/aes256_uart.v:207$125 ($le).
Removed top 1 bits (of 3) from port B of cell aes256_uart.$eq$src/aes256_uart.v:210$142 ($eq).
Removed top 31 bits (of 32) from port B of cell aes256_uart.$add$src/aes256_uart.v:222$145 ($add).
Removed top 26 bits (of 32) from port Y of cell aes256_uart.$add$src/aes256_uart.v:222$145 ($add).
Removed top 31 bits (of 32) from port B of cell aes256_uart.$add$src/aes256_uart.v:235$150 ($add).
Removed top 27 bits (of 32) from port Y of cell aes256_uart.$add$src/aes256_uart.v:235$150 ($add).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1246_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1269_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1293_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1318_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1344_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1371_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1399_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1428_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1458_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1489_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1521_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1554_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1588_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1623_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$1659_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell aes256_uart.$procmux$1696_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell aes256_uart.$procmux$1734_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell aes256_uart.$procmux$1773_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell aes256_uart.$procmux$1813_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell aes256_uart.$procmux$1854_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell aes256_uart.$procmux$1896_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell aes256_uart.$procmux$1939_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell aes256_uart.$procmux$1983_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell aes256_uart.$procmux$2028_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell aes256_uart.$procmux$2074_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell aes256_uart.$procmux$2121_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell aes256_uart.$procmux$2169_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell aes256_uart.$procmux$2218_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell aes256_uart.$procmux$2268_CMP0 ($eq).
Removed top 5 bits (of 6) from port B of cell aes256_uart.$procmux$2319_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell aes256_uart.$procmux$2392_CMP0 ($eq).
Removed top 1 bits (of 3) from mux cell aes256_uart.$procmux$2404 ($mux).
Removed top 1 bits (of 3) from mux cell aes256_uart.$procmux$2407 ($mux).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2663 ($ne).
Removed top 1 bits (of 3) from mux cell aes256_uart.$procmux$2409 ($pmux).
Removed top 1 bits (of 3) from FF cell aes256_uart.$procdff$2446 ($adff).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2469 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2471 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2473 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2506 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2508 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2510 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2498 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2453 ($ne).
Removed top 31 bits (of 32) from port B of cell aes256_uart.$flatten\aes256_enc.\key_exp_u.$gt$src/key_exp.v:86$171 ($gt).
Removed top 30 bits (of 32) from port B of cell aes256_uart.$flatten\aes256_enc.\key_exp_u.$gt$src/key_exp.v:93$174 ($gt).
Removed top 8 bits (of 32) from FF cell aes256_uart.$auto$ff.cc:266:slice$2833 ($adffe).
Removed top 2 bits (of 3) from port B of cell aes256_uart.$flatten\aes256_enc.\key_exp_u.$procmux$1000_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell aes256_uart.$flatten\aes256_enc.\key_exp_u.\round_constant_u.$eq$src/round_constant.v:41$525 ($eq).
Removed top 1 bits (of 3) from port B of cell aes256_uart.$flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$536_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell aes256_uart.$flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$535_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2818 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2757 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2735 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2722 ($ne).
Removed top 1 bits (of 3) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2713 ($ne).
Removed top 1 bits (of 3) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2702 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2693 ($ne).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2680 ($ne).
Removed top 2 bits (of 3) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2682 ($ne).
Removed top 1 bits (of 3) from port B of cell aes256_uart.$flatten\aes256_enc.\counters_u.$eq$src/counters.v:124$219 ($eq).
Removed top 31 bits (of 32) from port B of cell aes256_uart.$flatten\aes256_enc.\counters_u.$add$src/counters.v:126$221 ($add).
Removed top 28 bits (of 32) from port Y of cell aes256_uart.$flatten\aes256_enc.\counters_u.$add$src/counters.v:126$221 ($add).
Removed top 1 bits (of 3) from port B of cell aes256_uart.$flatten\aes256_enc.\counters_u.$procmux$564_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell aes256_uart.$flatten\aes256_enc.\counters_u.$procmux$565_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell aes256_uart.serial_rx_u.25 ($add).
Removed top 4 bits (of 11) from port B of cell aes256_uart.serial_rx_u.21 ($eq).
Removed top 10 bits (of 11) from port B of cell aes256_uart.serial_rx_u.19 ($add).
Removed top 1 bits (of 2) from port B of cell aes256_uart.serial_rx_u.17 ($eq).
Removed top 5 bits (of 11) from port B of cell aes256_uart.serial_rx_u.11 ($eq).
Removed top 1 bits (of 2) from port B of cell aes256_uart.$auto$opt_dff.cc:195:make_patterns_logic$2861 ($ne).
Removed top 2 bits (of 3) from port B of cell aes256_uart.serial_tx_u.36 ($add).
Removed top 1 bits (of 2) from port B of cell aes256_uart.serial_tx_u.26 ($eq).
Removed top 4 bits (of 11) from port B of cell aes256_uart.serial_tx_u.20 ($eq).
Removed top 10 bits (of 11) from port B of cell aes256_uart.serial_tx_u.18 ($add).
Removed top 1 bits (of 3) from port A of cell aes256_uart.$eq$src/aes256_uart.v:176$105 ($eq).
Removed top 1 bits (of 3) from port A of cell aes256_uart.$eq$src/aes256_uart.v:189$108 ($eq).
Removed top 1 bits (of 3) from port A of cell aes256_uart.$eq$src/aes256_uart.v:210$142 ($eq).
Removed top 1 bits (of 3) from wire aes256_uart.$0\current_state[2:0].
Removed top 26 bits (of 32) from wire aes256_uart.$add$src/aes256_uart.v:222$145_Y.
Removed top 27 bits (of 32) from wire aes256_uart.$add$src/aes256_uart.v:235$150_Y.
Removed top 28 bits (of 32) from wire aes256_uart.$flatten\aes256_enc.\counters_u.$add$src/counters.v:126$221_Y.
Removed top 1 bits (of 3) from wire aes256_uart.$procmux$2404_Y.
Removed top 1 bits (of 3) from wire aes256_uart.$procmux$2407_Y.

17.16. Executing PEEPOPT pass (run peephole optimizers).

17.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

17.18. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting aes256_uart.$procmux$1019 ... aes256_uart.$procmux$1022 to a pmux with 2 cases.
Converting aes256_uart.$ternary$src/aes256_uart.v:206$126 ... aes256_uart.$ternary$src/aes256_uart.v:191$141 to a pmux with 16 cases.
Converted 18 (p)mux cells into 2 pmux cells.
<suppressed ~92 debug messages>

17.19. Executing SHARE pass (SAT-based resource sharing).

17.20. Executing TECHMAP pass (map to technology primitives).

17.20.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/cmp2lut.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

17.20.2. Continuing TECHMAP pass.
Using template $paramod$106e7676feb63f00b8f79ebab3ff16b0f4c109cb\_90_lut_cmp_ for cells of type $gt.
Using template $paramod$b572544677d963e14c0b065ea224e532734f7bc9\_90_lut_cmp_ for cells of type $gt.
No more expansions possible.
<suppressed ~92 debug messages>

17.21. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 22 unused wires.
<suppressed ~1 debug messages>

17.23. Executing TECHMAP pass (map to technology primitives).

17.23.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/mul_map.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/mul_map.v' to AST representation.
Generating RTLIL representation for module `\$__MULMXN'.
Successfully finished Verilog frontend.

17.23.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

17.24. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module aes256_uart:
  creating $macc model for $add$src/aes256_uart.v:222$145 ($add).
  creating $macc model for $add$src/aes256_uart.v:235$150 ($add).
  creating $macc model for $flatten\aes256_enc.\counters_u.$add$src/counters.v:126$221 ($add).
  creating $macc model for serial_rx_u.19 ($add).
  creating $macc model for serial_rx_u.25 ($add).
  creating $macc model for serial_tx_u.18 ($add).
  creating $macc model for serial_tx_u.36 ($add).
  creating $alu model for $macc serial_tx_u.36.
  creating $alu model for $macc serial_tx_u.18.
  creating $alu model for $macc serial_rx_u.25.
  creating $alu model for $macc serial_rx_u.19.
  creating $alu model for $macc $flatten\aes256_enc.\counters_u.$add$src/counters.v:126$221.
  creating $alu model for $macc $add$src/aes256_uart.v:235$150.
  creating $alu model for $macc $add$src/aes256_uart.v:222$145.
  creating $alu model for $le$src/aes256_uart.v:207$125 ($le): new $alu
  creating $alu cell for $le$src/aes256_uart.v:207$125: $auto$alumacc.cc:485:replace_alu$2948
  creating $alu cell for $add$src/aes256_uart.v:222$145: $auto$alumacc.cc:485:replace_alu$2961
  creating $alu cell for $add$src/aes256_uart.v:235$150: $auto$alumacc.cc:485:replace_alu$2964
  creating $alu cell for $flatten\aes256_enc.\counters_u.$add$src/counters.v:126$221: $auto$alumacc.cc:485:replace_alu$2967
  creating $alu cell for serial_rx_u.19: $auto$alumacc.cc:485:replace_alu$2970
  creating $alu cell for serial_rx_u.25: $auto$alumacc.cc:485:replace_alu$2973
  creating $alu cell for serial_tx_u.18: $auto$alumacc.cc:485:replace_alu$2976
  creating $alu cell for serial_tx_u.36: $auto$alumacc.cc:485:replace_alu$2979
  created 8 $alu and 0 $macc cells.

17.25. Executing OPT pass (performing simple optimizations).

17.25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

17.25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.25.6. Executing OPT_DFF pass (perform DFF optimizations).

17.25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

17.25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.25.9. Rerunning OPT passes. (Maybe there is more to do..)

17.25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

17.25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.25.13. Executing OPT_DFF pass (perform DFF optimizations).

17.25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.25.16. Finished OPT passes. (There is nothing left to do.)

17.26. Executing MEMORY pass.

17.26.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

17.26.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

17.26.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

17.26.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

17.26.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

17.26.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.26.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

17.26.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

17.26.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.26.10. Executing MEMORY_COLLECT pass (generating $mem cells).

17.27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.28. Executing MEMORY_LIBMAP pass (mapping memories to cells).

17.29. Executing TECHMAP pass (map to technology primitives).

17.29.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/brams_map.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__CC_BRAM_TDP_'.
Generating RTLIL representation for module `\$__CC_BRAM_SDP_'.
Successfully finished Verilog frontend.

17.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

17.30. Executing OPT pass (performing simple optimizations).

17.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~118 debug messages>

17.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.30.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$2449 ($dffe) from module aes256_uart (D = $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$21, Q = \serial_tx_u.bit_ctr_q, rval = 3'000).

17.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 1 unused cells and 68 unused wires.
<suppressed ~3 debug messages>

17.30.5. Rerunning OPT passes. (Removed registers in this run.)

17.30.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~1 debug messages>

17.30.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.30.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$2479 ($dffe) from module aes256_uart (D = \tx_byte [7], Q = \serial_tx_u.data_q [7], rval = 1'0).

17.30.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

17.30.10. Rerunning OPT passes. (Removed registers in this run.)

17.30.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.30.13. Executing OPT_DFF pass (perform DFF optimizations).

17.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.30.15. Finished fast OPT passes.

17.31. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

17.32. Executing OPT pass (performing simple optimizations).

17.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\counters_u.$ternary$src/counters.v:55$212:
      Old ports: A=3'110, B=3'001, Y=$flatten\aes256_enc.\counters_u.$ternary$src/counters.v:55$212_Y
      New ports: A=2'10, B=2'01, Y=$flatten\aes256_enc.\counters_u.$ternary$src/counters.v:55$212_Y [1:0]
      New connections: $flatten\aes256_enc.\counters_u.$ternary$src/counters.v:55$212_Y [2] = $flatten\aes256_enc.\counters_u.$ternary$src/counters.v:55$212_Y [1]
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\counters_u.$ternary$src/counters.v:56$213:
      Old ports: A=3'001, B=3'101, Y=$flatten\aes256_enc.\counters_u.$ternary$src/counters.v:56$213_Y
      New ports: A=1'0, B=1'1, Y=$flatten\aes256_enc.\counters_u.$ternary$src/counters.v:56$213_Y [2]
      New connections: $flatten\aes256_enc.\counters_u.$ternary$src/counters.v:56$213_Y [1:0] = 2'01
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\counters_u.$ternary$src/counters.v:61$214:
      Old ports: A=3'101, B=3'001, Y=$flatten\aes256_enc.\counters_u.$ternary$src/counters.v:61$214_Y
      New ports: A=1'1, B=1'0, Y=$flatten\aes256_enc.\counters_u.$ternary$src/counters.v:61$214_Y [2]
      New connections: $flatten\aes256_enc.\counters_u.$ternary$src/counters.v:61$214_Y [1:0] = 2'01
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:0] 1'0 }, B=16777216, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:0], B=31'0000000100000000000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:1]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\mix_columns_u.$ternary$src/mix_columns.v:55$195:
      Old ports: A={ \aes256_enc.shift_rows_u.block_2 [127:104] \aes256_enc.key_exp_u.sub_out [7:0] }, B={ \aes256_enc.shift_rows_u.block_1 [127:104] \aes256_enc.key_exp_u.sub_out [7:0] }, Y=$flatten\aes256_enc.\mix_columns_u.$ternary$src/mix_columns.v:55$195_Y
      New ports: A=\aes256_enc.shift_rows_u.block_2 [127:104], B=\aes256_enc.shift_rows_u.block_1 [127:104], Y=$flatten\aes256_enc.\mix_columns_u.$ternary$src/mix_columns.v:55$195_Y [31:8]
      New connections: $flatten\aes256_enc.\mix_columns_u.$ternary$src/mix_columns.v:55$195_Y [7:0] = \aes256_enc.key_exp_u.sub_out [7:0]
    Consolidated identical input bits for $mux cell $procmux$2404:
      Old ports: A=2'11, B=2'00, Y=$auto$wreduce.cc:455:run$2940 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$2940 [0]
      New connections: $auto$wreduce.cc:455:run$2940 [1] = $auto$wreduce.cc:455:run$2940 [0]
    New ctrl vector for $pmux cell \serial_rx_u.48: { $flatten\serial_rx_u.$auto$ghdl.cc:805:import_module$67 $flatten\serial_rx_u.$auto$ghdl.cc:805:import_module$55 $flatten\serial_rx_u.$auto$ghdl.cc:805:import_module$50 }
    New ctrl vector for $pmux cell \serial_tx_u.58: { $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$23 $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$13 $flatten\serial_tx_u.$auto$ghdl.cc:805:import_module$8 }
  Optimizing cells in module \aes256_uart.
Performed a total of 8 changes.

17.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.6. Executing OPT_DFF pass (perform DFF optimizations).

17.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.9. Rerunning OPT passes. (Maybe there is more to do..)

17.32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$2854 ($adffe) from module aes256_uart.

17.32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.16. Rerunning OPT passes. (Maybe there is more to do..)

17.32.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:1] 1'0 }, B=31'0000000100000000000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:1]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:1], B=30'000000010000000000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:2]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [1] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.20. Executing OPT_DFF pass (perform DFF optimizations).

17.32.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

17.32.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.23. Rerunning OPT passes. (Maybe there is more to do..)

17.32.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.27. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$2997 ($adffe) from module aes256_uart.

17.32.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.30. Rerunning OPT passes. (Maybe there is more to do..)

17.32.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:2] 1'0 }, B=30'000000010000000000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:2]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:2], B=29'00000001000000000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:3]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [2] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.34. Executing OPT_DFF pass (perform DFF optimizations).

17.32.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.37. Rerunning OPT passes. (Maybe there is more to do..)

17.32.38. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.39. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.40. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.41. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3001 ($adffe) from module aes256_uart.

17.32.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.43. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.44. Rerunning OPT passes. (Maybe there is more to do..)

17.32.45. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.46. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:3] 1'0 }, B=29'00000001000000000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:3]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:3], B=28'0000000100000000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:4]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [3] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.48. Executing OPT_DFF pass (perform DFF optimizations).

17.32.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.51. Rerunning OPT passes. (Maybe there is more to do..)

17.32.52. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.53. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.54. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.55. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3005 ($adffe) from module aes256_uart.

17.32.56. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.57. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.58. Rerunning OPT passes. (Maybe there is more to do..)

17.32.59. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.60. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:4] 1'0 }, B=28'0000000100000000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:4]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:4], B=27'000000010000000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:5]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [4] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.61. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.62. Executing OPT_DFF pass (perform DFF optimizations).

17.32.63. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.64. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.65. Rerunning OPT passes. (Maybe there is more to do..)

17.32.66. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.67. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.68. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.69. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3009 ($adffe) from module aes256_uart.

17.32.70. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.71. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.72. Rerunning OPT passes. (Maybe there is more to do..)

17.32.73. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.74. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:5] 1'0 }, B=27'000000010000000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:5]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:5], B=26'00000001000000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:6]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [5] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.75. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.76. Executing OPT_DFF pass (perform DFF optimizations).

17.32.77. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.78. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.79. Rerunning OPT passes. (Maybe there is more to do..)

17.32.80. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.81. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.82. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.83. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3013 ($adffe) from module aes256_uart.

17.32.84. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.85. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.86. Rerunning OPT passes. (Maybe there is more to do..)

17.32.87. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.88. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:6] 1'0 }, B=26'00000001000000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:6]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:6], B=25'0000000100000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:7]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [6] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.89. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.90. Executing OPT_DFF pass (perform DFF optimizations).

17.32.91. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.92. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.93. Rerunning OPT passes. (Maybe there is more to do..)

17.32.94. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.95. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.96. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.97. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3017 ($adffe) from module aes256_uart.

17.32.98. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.99. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.100. Rerunning OPT passes. (Maybe there is more to do..)

17.32.101. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.102. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:7] 1'0 }, B=25'0000000100000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:7]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:7], B=24'000000010000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:8]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [7] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.104. Executing OPT_DFF pass (perform DFF optimizations).

17.32.105. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.106. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.107. Rerunning OPT passes. (Maybe there is more to do..)

17.32.108. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.109. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.110. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.111. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3021 ($adffe) from module aes256_uart.

17.32.112. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.113. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.114. Rerunning OPT passes. (Maybe there is more to do..)

17.32.115. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.116. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:8] 1'0 }, B=24'000000010000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:8]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:8], B=23'00000001000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:9]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [8] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.117. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.118. Executing OPT_DFF pass (perform DFF optimizations).

17.32.119. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.120. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.121. Rerunning OPT passes. (Maybe there is more to do..)

17.32.122. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.123. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.124. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.125. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3025 ($adffe) from module aes256_uart.

17.32.126. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.127. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.128. Rerunning OPT passes. (Maybe there is more to do..)

17.32.129. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.130. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:9] 1'0 }, B=23'00000001000000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:9]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:9], B=22'0000000100000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:10]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [9] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.131. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.132. Executing OPT_DFF pass (perform DFF optimizations).

17.32.133. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.134. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.135. Rerunning OPT passes. (Maybe there is more to do..)

17.32.136. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.137. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.138. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.139. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3029 ($adffe) from module aes256_uart.

17.32.140. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.141. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.142. Rerunning OPT passes. (Maybe there is more to do..)

17.32.143. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.144. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:10] 1'0 }, B=22'0000000100000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:10]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:10], B=21'000000010000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:11]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [10] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.145. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.146. Executing OPT_DFF pass (perform DFF optimizations).

17.32.147. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.148. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.149. Rerunning OPT passes. (Maybe there is more to do..)

17.32.150. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.151. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.152. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.153. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3033 ($adffe) from module aes256_uart.

17.32.154. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.155. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.156. Rerunning OPT passes. (Maybe there is more to do..)

17.32.157. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.158. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:11] 1'0 }, B=21'000000010000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:11]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:11], B=20'00000001000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:12]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [11] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.159. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.160. Executing OPT_DFF pass (perform DFF optimizations).

17.32.161. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.162. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.163. Rerunning OPT passes. (Maybe there is more to do..)

17.32.164. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.165. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.166. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.167. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3037 ($adffe) from module aes256_uart.

17.32.168. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.169. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.170. Rerunning OPT passes. (Maybe there is more to do..)

17.32.171. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.172. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:12] 1'0 }, B=20'00000001000000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:12]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:12], B=19'0000000100000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:13]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [12] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.173. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.174. Executing OPT_DFF pass (perform DFF optimizations).

17.32.175. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.176. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.177. Rerunning OPT passes. (Maybe there is more to do..)

17.32.178. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.179. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.180. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.181. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3041 ($adffe) from module aes256_uart.

17.32.182. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.183. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.184. Rerunning OPT passes. (Maybe there is more to do..)

17.32.185. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.186. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:13] 1'0 }, B=19'0000000100000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:13]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:13], B=18'000000010000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:14]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [13] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.187. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.188. Executing OPT_DFF pass (perform DFF optimizations).

17.32.189. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.190. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.191. Rerunning OPT passes. (Maybe there is more to do..)

17.32.192. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.193. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.194. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.195. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3045 ($adffe) from module aes256_uart.

17.32.196. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.197. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.198. Rerunning OPT passes. (Maybe there is more to do..)

17.32.199. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.200. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:14] 1'0 }, B=18'000000010000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:14]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:14], B=17'00000001000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:15]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [14] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.201. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.202. Executing OPT_DFF pass (perform DFF optimizations).

17.32.203. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.204. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.205. Rerunning OPT passes. (Maybe there is more to do..)

17.32.206. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.207. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.208. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.209. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3049 ($adffe) from module aes256_uart.

17.32.210. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.211. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.212. Rerunning OPT passes. (Maybe there is more to do..)

17.32.213. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.214. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:15] 1'0 }, B=17'00000001000000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:15]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:15], B=16'0000000100000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:16]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [15] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.215. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.216. Executing OPT_DFF pass (perform DFF optimizations).

17.32.217. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.218. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.219. Rerunning OPT passes. (Maybe there is more to do..)

17.32.220. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.221. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.222. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.223. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3053 ($adffe) from module aes256_uart.

17.32.224. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.225. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.226. Rerunning OPT passes. (Maybe there is more to do..)

17.32.227. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.228. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:16] 1'0 }, B=16'0000000100000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:16]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:16], B=15'000000010000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:17]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [16] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.229. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.230. Executing OPT_DFF pass (perform DFF optimizations).

17.32.231. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.232. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.233. Rerunning OPT passes. (Maybe there is more to do..)

17.32.234. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.235. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.236. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.237. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3057 ($adffe) from module aes256_uart.

17.32.238. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.239. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.240. Rerunning OPT passes. (Maybe there is more to do..)

17.32.241. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.242. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:17] 1'0 }, B=15'000000010000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:17]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:17], B=14'00000001000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:18]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [17] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.243. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.244. Executing OPT_DFF pass (perform DFF optimizations).

17.32.245. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.246. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.247. Rerunning OPT passes. (Maybe there is more to do..)

17.32.248. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.249. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.250. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.251. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3061 ($adffe) from module aes256_uart.

17.32.252. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.253. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.254. Rerunning OPT passes. (Maybe there is more to do..)

17.32.255. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.256. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:18] 1'0 }, B=14'00000001000000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:18]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:18], B=13'0000000100000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:19]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [18] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.257. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.258. Executing OPT_DFF pass (perform DFF optimizations).

17.32.259. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.260. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.261. Rerunning OPT passes. (Maybe there is more to do..)

17.32.262. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.263. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.264. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.265. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3065 ($adffe) from module aes256_uart.

17.32.266. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.267. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.268. Rerunning OPT passes. (Maybe there is more to do..)

17.32.269. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.270. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:19] 1'0 }, B=13'0000000100000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:19]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:19], B=12'000000010000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:20]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [19] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.271. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.272. Executing OPT_DFF pass (perform DFF optimizations).

17.32.273. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.274. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.275. Rerunning OPT passes. (Maybe there is more to do..)

17.32.276. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.277. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.278. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.279. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3069 ($adffe) from module aes256_uart.

17.32.280. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.281. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.282. Rerunning OPT passes. (Maybe there is more to do..)

17.32.283. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.284. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:20] 1'0 }, B=12'000000010000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:20]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:20], B=11'00000001000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:21]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [20] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.285. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.286. Executing OPT_DFF pass (perform DFF optimizations).

17.32.287. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.288. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.289. Rerunning OPT passes. (Maybe there is more to do..)

17.32.290. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.291. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.292. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.293. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3073 ($adffe) from module aes256_uart.

17.32.294. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.295. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.296. Rerunning OPT passes. (Maybe there is more to do..)

17.32.297. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.298. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:21] 1'0 }, B=11'00000001000, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:21]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:21], B=10'0000000100, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:22]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [21] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.299. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.300. Executing OPT_DFF pass (perform DFF optimizations).

17.32.301. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.302. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.303. Rerunning OPT passes. (Maybe there is more to do..)

17.32.304. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.305. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.306. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.307. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3077 ($adffe) from module aes256_uart.

17.32.308. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.309. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.310. Rerunning OPT passes. (Maybe there is more to do..)

17.32.311. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.312. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:22] 1'0 }, B=10'0000000100, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:22]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:22], B=9'000000010, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:23]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [22] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.313. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.314. Executing OPT_DFF pass (perform DFF optimizations).

17.32.315. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.316. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.317. Rerunning OPT passes. (Maybe there is more to do..)

17.32.318. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.319. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.320. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.321. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3081 ($adffe) from module aes256_uart.

17.32.322. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.323. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.324. Rerunning OPT passes. (Maybe there is more to do..)

17.32.325. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.326. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
    Consolidated identical input bits for $mux cell $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526:
      Old ports: A={ \aes256_enc.key_exp_u.round_constant_u.RC [30:23] 1'0 }, B=9'000000010, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:23]
      New ports: A=\aes256_enc.key_exp_u.round_constant_u.RC [30:23], B=8'00000001, Y=$flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31:24]
      New connections: $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [23] = 1'0
  Optimizing cells in module \aes256_uart.
Performed a total of 1 changes.

17.32.327. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.328. Executing OPT_DFF pass (perform DFF optimizations).

17.32.329. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.330. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.331. Rerunning OPT passes. (Maybe there is more to do..)

17.32.332. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.333. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.334. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.335. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$3085 ($adffe) from module aes256_uart.

17.32.336. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.337. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~5 debug messages>

17.32.338. Rerunning OPT passes. (Maybe there is more to do..)

17.32.339. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.340. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.341. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.342. Executing OPT_DFF pass (perform DFF optimizations).

17.32.343. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

17.32.344. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.345. Rerunning OPT passes. (Maybe there is more to do..)

17.32.346. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

17.32.347. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.32.348. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.32.349. Executing OPT_DFF pass (perform DFF optimizations).

17.32.350. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.32.351. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.32.352. Finished OPT passes. (There is nothing left to do.)

17.33. Executing TECHMAP pass (map to technology primitives).

17.33.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/techmap.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

17.33.2. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/arith_map.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_gatemate_alu'.
Successfully finished Verilog frontend.

17.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_80_gatemate_alu for cells of type $alu.
Using template $paramod$29dcfde687ab76cd03c4ee062fb9520b20dbe845\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_80_gatemate_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_80_gatemate_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $lut.
Using template $paramod$068ad458e7761d78e5eed8238508872e7b0aef95\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$2f5fb04daf2da94d981bf9455fa4454c6ec8b705\_80_gatemate_alu for cells of type $alu.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using template $paramod$a285b5a57fe61eabc57c91b8c412748ee1151a85\_90_pmux for cells of type $pmux.
Using template $paramod$97b4ede9ac0b1e299c90f9b8e8f5b82f01419d4d\_90_pmux for cells of type $pmux.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_80_gatemate_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_80_gatemate_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1731 debug messages>

17.34. Executing OPT pass (performing simple optimizations).

17.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~1700 debug messages>

17.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
<suppressed ~1317 debug messages>
Removed a total of 439 cells.

17.34.3. Executing OPT_DFF pass (perform DFF optimizations).

17.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 13 unused cells and 1230 unused wires.
<suppressed ~14 debug messages>

17.34.5. Finished fast OPT passes.

17.35. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port aes256_uart.clk using CC_IBUF.
Mapping port aes256_uart.data_in using CC_IBUF.
Mapping port aes256_uart.data_out using CC_OBUF.
Mapping port aes256_uart.led using CC_OBUF.
Mapping port aes256_uart.reset_n using CC_IBUF.
Removed 0 unused cells and 5 unused wires.

17.36. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.37. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

17.38. Executing TECHMAP pass (map to technology primitives).

17.38.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/reg_map.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/reg_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFFE_xxxx_'.
Generating RTLIL representation for module `\$_DLATCH_xxx_'.
Successfully finished Verilog frontend.

17.38.2. Continuing TECHMAP pass.
Using template $paramod$baf26f3bd5ca79652fd198045fd035ec24cbdc85\$_DFFE_xxxx_ for cells of type $_DFFE_PP0P_.
Using template $paramod$77ebc8e70eef7b19cc829dcd1c7d54db125f104d\$_DFFE_xxxx_ for cells of type $_DFFE_PN0P_.
Using template $paramod$17d85764cba1d0687037e7d6f74bfececd401709\$_DFFE_xxxx_ for cells of type $_DFFE_PN1P_.
Using template $paramod$ab1faed434950835c1ed7cdd01c92c69635dd29f\$_DFFE_xxxx_ for cells of type $_DFFE_PN0N_.
No more expansions possible.
<suppressed ~1403 debug messages>

17.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.40. Executing SIMPLEMAP pass (map simple cells to gate primitives).

17.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 6665 unused wires.
<suppressed ~1 debug messages>

17.42. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module aes256_uart..
  Treeifying 1066 MUXes:
    Found tree with 2 MUXes at root $techmap2944$flatten\aes256_enc.\key_exp_u.$gt$src/key_exp.v:86$171.Y.
    Found tree with 1 MUXes at root $0\cnt_rx[5:0] [0].
    Found tree with 1 MUXes at root $0\cnt_rx[5:0] [1].
    Found tree with 1 MUXes at root $0\cnt_rx[5:0] [2].
    Found tree with 1 MUXes at root $0\cnt_rx[5:0] [3].
    Found tree with 1 MUXes at root $0\cnt_rx[5:0] [4].
    Found tree with 1 MUXes at root $0\cnt_rx[5:0] [5].
    Found tree with 1 MUXes at root $0\cnt_tx[4:0] [0].
    Found tree with 1 MUXes at root $0\cnt_tx[4:0] [1].
    Found tree with 1 MUXes at root $0\cnt_tx[4:0] [2].
    Found tree with 1 MUXes at root $0\cnt_tx[4:0] [3].
    Found tree with 1 MUXes at root $0\cnt_tx[4:0] [4].
    Found tree with 1 MUXes at root \serial_rx_u.50.B [11].
    Found tree with 1 MUXes at root \serial_rx_u.50.B [12].
    Found tree with 1 MUXes at root \serial_rx_u.50.B [13].
    Found tree with 1 MUXes at root \serial_rx_u.50.B [14].
    Found tree with 1 MUXes at root \serial_rx_u.50.B [15].
    Found tree with 1 MUXes at root \serial_rx_u.50.B [16].
    Found tree with 1 MUXes at root \serial_rx_u.50.B [17].
    Found tree with 1 MUXes at root \serial_rx_u.50.B [18].
    Found tree with 1 MUXes at root \serial_rx_u.50.B [19].
    Found tree with 1 MUXes at root \serial_rx_u.50.B [20].
    Found tree with 1 MUXes at root \serial_rx_u.50.B [21].
    Found tree with 1 MUXes at root \serial_tx_u.59.B [11].
    Found tree with 1 MUXes at root \serial_tx_u.59.B [12].
    Found tree with 1 MUXes at root \serial_tx_u.59.B [13].
    Found tree with 1 MUXes at root \serial_tx_u.59.B [14].
    Found tree with 1 MUXes at root \serial_tx_u.59.B [15].
    Found tree with 1 MUXes at root \serial_tx_u.59.B [16].
    Found tree with 1 MUXes at root \serial_tx_u.59.B [17].
    Found tree with 1 MUXes at root \serial_tx_u.59.B [18].
    Found tree with 1 MUXes at root \serial_tx_u.59.B [19].
    Found tree with 1 MUXes at root \serial_tx_u.59.B [20].
    Found tree with 1 MUXes at root \serial_tx_u.59.B [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [32].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [33].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [34].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [35].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [36].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [37].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [38].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [39].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [40].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [41].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [42].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [43].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [44].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [45].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [46].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [47].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [48].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [49].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [50].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [51].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [52].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [53].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [54].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [55].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [56].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [57].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [58].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [59].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [60].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [61].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [62].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [63].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [64].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [65].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [66].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [67].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [68].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [69].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [70].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [71].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [72].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [73].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [74].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [75].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [76].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [77].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [78].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [79].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [80].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [81].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [82].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [83].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [84].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [85].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [86].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [87].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [88].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [89].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [90].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [91].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [92].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [93].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [94].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [95].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [0].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [1].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [2].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [3].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [4].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [5].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [6].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [7].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [8].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [9].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [10].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [11].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [12].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [13].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [14].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [15].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [16].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [17].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [18].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [19].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [20].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [21].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [22].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [23].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [24].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [25].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [26].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [27].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [28].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [29].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [30].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [31].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [0].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [1].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [2].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [3].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [4].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [5].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [6].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [7].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [8].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [9].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [10].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [11].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [12].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [13].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [14].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [15].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [16].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [17].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [18].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [19].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [20].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [21].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [22].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [23].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [24].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [25].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [26].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [27].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [28].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [29].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [30].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [31].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [32].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [33].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [34].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [35].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [36].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [37].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [38].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [39].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [40].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [41].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [42].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [43].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [44].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [45].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [46].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [47].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [48].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [49].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [50].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [51].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [52].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [53].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [54].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [55].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [56].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [57].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [58].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [59].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [60].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [61].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [62].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [63].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [64].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [65].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [66].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [67].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [68].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [69].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [70].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [71].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [72].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [73].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [74].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [75].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [76].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [77].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [78].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [79].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [80].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [81].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [82].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [83].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [84].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [85].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [86].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [87].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [88].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [89].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [90].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [91].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [92].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [93].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [94].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [95].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [0].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [1].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [2].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [3].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [4].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [5].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [6].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [7].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [8].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [9].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [10].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [11].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [12].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [13].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [14].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [15].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [16].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [17].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [18].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [19].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [20].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [21].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [22].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [23].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [24].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [25].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [26].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [27].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [28].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [29].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [30].
    Found tree with 3 MUXes at root $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [31].
    Found tree with 1 MUXes at root $procmux$2409.B [0].
    Found tree with 1 MUXes at root $procmux$2409.B [1].
    Found tree with 1 MUXes at root $procmux$2409.Y [0].
    Found tree with 1 MUXes at root $procmux$2409.Y [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31].
    Found tree with 1 MUXes at root \aes256_enc.key_exp_u.round_constant_u.step [0].
    Found tree with 1 MUXes at root \aes256_enc.key_exp_u.round_constant_u.step [1].
    Found tree with 1 MUXes at root \aes256_enc.key_exp_u.round_constant_u.step [2].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [0].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [1].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [2].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [3].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [4].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [5].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [6].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [7].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [8].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [9].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [10].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [11].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [12].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [13].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [14].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [15].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [16].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [17].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [18].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [19].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [20].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [21].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [22].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [23].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [24].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [25].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [26].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [27].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [28].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [29].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [30].
    Found tree with 1 MUXes at root \aes256_enc.shift_rows_u.mix_out [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [8].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [9].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [10].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [11].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [12].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [13].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [14].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [15].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [16].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [17].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [18].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [19].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [20].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [21].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [22].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [23].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [24].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [25].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [26].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [27].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [28].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [29].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [30].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [31].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [40].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [41].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [42].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [43].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [44].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [45].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [46].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [47].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [48].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [49].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [50].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [51].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [52].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [53].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [54].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [55].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [56].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [57].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [58].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [59].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [60].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [61].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [62].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [63].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [72].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [73].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [74].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [75].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [76].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [77].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [78].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [79].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [80].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [81].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [82].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [83].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [84].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [85].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [86].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [87].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [88].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [89].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [90].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [91].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [92].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [93].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [94].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [95].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [96].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [97].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [98].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [99].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [100].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [101].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [102].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [103].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [104].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [105].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [106].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [107].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [108].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [109].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [110].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [111].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [112].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [113].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [114].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [115].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [116].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [117].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [118].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [119].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [120].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [121].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [122].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [123].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [124].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [125].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [126].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [127].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [7].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [3].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [4].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [5].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [6].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [7].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2560:MuxGate$10837.
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [0].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [1].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [2].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [3].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [4].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [5].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [6].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [7].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [8].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [9].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [10].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [11].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [12].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [13].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [14].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [15].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [16].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [17].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [18].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [19].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [20].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [21].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [22].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [23].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [24].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [25].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [26].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [27].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [28].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [29].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [30].
    Found tree with 2 MUXes at root $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [31].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2560:MuxGate$10841.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2560:MuxGate$10843.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2560:MuxGate$10839.
    Found tree with 1 MUXes at root $ternary$src/aes256_uart.v:206$126.Y [0].
    Found tree with 1 MUXes at root $ternary$src/aes256_uart.v:206$126.Y [1].
    Found tree with 1 MUXes at root $ternary$src/aes256_uart.v:206$126.Y [2].
    Found tree with 1 MUXes at root $ternary$src/aes256_uart.v:206$126.Y [3].
    Found tree with 1 MUXes at root $ternary$src/aes256_uart.v:206$126.Y [4].
    Found tree with 1 MUXes at root $ternary$src/aes256_uart.v:206$126.Y [5].
    Found tree with 1 MUXes at root $ternary$src/aes256_uart.v:206$126.Y [6].
    Found tree with 1 MUXes at root $ternary$src/aes256_uart.v:206$126.Y [7].
    Found tree with 1 MUXes at root \aes256_enc.counters_u.ready.
    Found tree with 1 MUXes at root \aes256_enc.counters_u.next_state [0].
    Found tree with 1 MUXes at root \aes256_enc.counters_u.next_state [1].
    Found tree with 1 MUXes at root \aes256_enc.counters_u.next_state [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\counters_u.$procmux$540_Y [0].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\counters_u.$procmux$540_Y [1].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\counters_u.$procmux$540_Y [2].
    Found tree with 1 MUXes at root $flatten\aes256_enc.\counters_u.$procmux$540_Y [3].
    Found tree with 3 MUXes at root $techmap2946$flatten\aes256_enc.\key_exp_u.$gt$src/key_exp.v:93$174.Y.
    Found tree with 2 MUXes at root \serial_rx_u.new_data_d.
    Found tree with 1 MUXes at root \serial_rx_u.bit_ctr_d [0].
    Found tree with 1 MUXes at root \serial_rx_u.bit_ctr_d [1].
    Found tree with 1 MUXes at root \serial_rx_u.bit_ctr_d [2].
    Found tree with 2 MUXes at root \serial_rx_u.ctr_d [0].
    Found tree with 2 MUXes at root \serial_rx_u.ctr_d [1].
    Found tree with 2 MUXes at root \serial_rx_u.ctr_d [2].
    Found tree with 2 MUXes at root \serial_rx_u.ctr_d [3].
    Found tree with 2 MUXes at root \serial_rx_u.ctr_d [4].
    Found tree with 2 MUXes at root \serial_rx_u.ctr_d [5].
    Found tree with 2 MUXes at root \serial_rx_u.ctr_d [6].
    Found tree with 2 MUXes at root \serial_rx_u.ctr_d [7].
    Found tree with 2 MUXes at root \serial_rx_u.ctr_d [8].
    Found tree with 2 MUXes at root \serial_rx_u.ctr_d [9].
    Found tree with 2 MUXes at root \serial_rx_u.ctr_d [10].
    Found tree with 1 MUXes at root \serial_rx_u.state_d [0].
    Found tree with 1 MUXes at root \serial_rx_u.state_d [1].
    Found tree with 1 MUXes at root \serial_tx_u.tx_d.
    Found tree with 1 MUXes at root \serial_tx_u.data_d [0].
    Found tree with 1 MUXes at root \serial_tx_u.data_d [1].
    Found tree with 1 MUXes at root \serial_tx_u.data_d [2].
    Found tree with 1 MUXes at root \serial_tx_u.data_d [3].
    Found tree with 1 MUXes at root \serial_tx_u.data_d [4].
    Found tree with 1 MUXes at root \serial_tx_u.data_d [5].
    Found tree with 1 MUXes at root \serial_tx_u.data_d [6].
    Found tree with 1 MUXes at root \serial_tx_u.ctr_d [0].
    Found tree with 1 MUXes at root \serial_tx_u.ctr_d [1].
    Found tree with 1 MUXes at root \serial_tx_u.ctr_d [2].
    Found tree with 1 MUXes at root \serial_tx_u.ctr_d [3].
    Found tree with 1 MUXes at root \serial_tx_u.ctr_d [4].
    Found tree with 1 MUXes at root \serial_tx_u.ctr_d [5].
    Found tree with 1 MUXes at root \serial_tx_u.ctr_d [6].
    Found tree with 1 MUXes at root \serial_tx_u.ctr_d [7].
    Found tree with 1 MUXes at root \serial_tx_u.ctr_d [8].
    Found tree with 1 MUXes at root \serial_tx_u.ctr_d [9].
    Found tree with 1 MUXes at root \serial_tx_u.ctr_d [10].
    Found tree with 1 MUXes at root \serial_tx_u.state_d [0].
    Found tree with 1 MUXes at root \serial_tx_u.state_d [1].
    Finished treeification: Found 803 trees.
  Covering trees:
    Replaced tree at $techmap2944$flatten\aes256_enc.\key_exp_u.$gt$src/key_exp.v:86$171.Y: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_rx[5:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_rx[5:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_rx[5:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_rx[5:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_rx[5:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_rx[5:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_tx[4:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_tx[4:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_tx[4:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_tx[4:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\cnt_tx[4:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.50.B [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.50.B [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.50.B [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.50.B [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.50.B [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.50.B [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.50.B [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.50.B [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.50.B [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.50.B [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.50.B [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.59.B [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.59.B [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.59.B [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.59.B [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.59.B [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.59.B [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.59.B [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.59.B [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.59.B [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.59.B [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.59.B [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [32]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [33]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [34]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [35]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [36]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [37]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [38]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [39]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [40]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [41]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [42]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [43]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [44]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [45]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [46]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [47]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [48]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [49]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [50]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [51]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [52]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [53]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [54]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [55]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [56]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [57]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [58]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [59]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [60]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [61]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [62]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [63]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [64]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [65]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [66]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [67]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [68]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [69]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [70]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [71]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [72]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [73]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [74]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [75]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [76]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [77]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [78]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [79]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [80]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [81]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [82]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [83]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [84]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [85]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [86]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [87]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [88]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [89]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [90]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [91]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [92]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [93]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [94]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.B [95]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [0]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [1]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [2]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [3]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [4]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [5]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [6]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [7]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [8]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [9]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [10]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [11]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [12]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [13]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [14]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [15]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [16]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [17]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [18]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [19]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [20]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [21]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [22]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [23]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [24]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [25]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [26]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [27]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [28]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [29]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [30]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_key_u.$procmux$534.Y [31]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [4]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [5]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [6]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [7]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [8]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [9]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [10]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [11]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [12]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [13]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [14]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [15]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [16]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [17]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [18]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [19]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [20]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [21]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [22]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [23]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [24]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [25]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [26]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [27]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [28]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [29]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [30]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [31]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [32]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [33]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [34]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [35]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [36]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [37]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [38]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [39]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [40]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [41]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [42]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [43]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [44]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [45]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [46]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [47]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [48]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [49]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [50]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [51]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [52]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [53]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [54]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [55]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [56]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [57]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [58]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [59]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [60]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [61]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [62]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [63]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [64]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [65]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [66]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [67]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [68]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [69]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [70]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [71]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [72]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [73]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [74]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [75]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [76]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [77]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [78]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [79]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [80]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [81]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [82]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [83]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [84]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [85]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [86]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [87]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [88]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [89]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [90]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [91]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [92]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [93]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [94]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.B [95]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [4]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [5]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [6]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [7]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [8]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [9]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [10]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [11]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [12]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [13]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [14]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [15]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [16]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [17]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [18]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [19]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [20]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [21]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [22]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [23]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [24]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [25]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [26]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [27]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [28]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [29]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [30]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\mix_columns_u.$procmux$575.Y [31]: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$2409.B [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$2409.B [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$2409.Y [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$2409.Y [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k3[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k7_rot[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k0[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k1[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k2[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k4[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k5[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.$0\k6[31:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\key_exp_u.\round_constant_u.$ternary$src/round_constant.v:41$526_Y [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.key_exp_u.round_constant_u.step [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.key_exp_u.round_constant_u.step [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.key_exp_u.round_constant_u.step [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.shift_rows_u.mix_out [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [40]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [41]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [42]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [43]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [44]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [45]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [46]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [47]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [48]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [49]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [50]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [51]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [52]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [53]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [54]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [55]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [56]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [57]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [58]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [59]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [60]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [61]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [62]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [63]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [72]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [73]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [74]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [75]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [76]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [77]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [78]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [79]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [80]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [81]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [82]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [83]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [84]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [85]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [86]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [87]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [88]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [89]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [90]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [91]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [92]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [93]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [94]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [95]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [96]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [97]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [98]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [99]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [100]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [101]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [102]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [103]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [104]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [105]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [106]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [107]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [108]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [109]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [110]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [111]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [112]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [113]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [114]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [115]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [116]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [117]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [118]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [119]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [120]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [121]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [122]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [123]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [124]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [125]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [126]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$0\block_1[127:0] [127]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$634_Y [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\shift_rows_u.$procmux$700_Y [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2560:MuxGate$10837: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [4]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [5]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [6]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [7]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [8]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [9]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [10]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [11]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [12]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [13]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [14]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [15]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [16]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [17]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [18]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [19]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [20]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [21]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [22]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [23]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [24]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [25]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [26]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [27]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [28]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [29]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [30]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\sub_bytes_u.$0\sub_in[31:0] [31]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2560:MuxGate$10841: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2560:MuxGate$10843: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2560:MuxGate$10839: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $ternary$src/aes256_uart.v:206$126.Y [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $ternary$src/aes256_uart.v:206$126.Y [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $ternary$src/aes256_uart.v:206$126.Y [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $ternary$src/aes256_uart.v:206$126.Y [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $ternary$src/aes256_uart.v:206$126.Y [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $ternary$src/aes256_uart.v:206$126.Y [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $ternary$src/aes256_uart.v:206$126.Y [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $ternary$src/aes256_uart.v:206$126.Y [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.counters_u.ready: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.counters_u.next_state [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.counters_u.next_state [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \aes256_enc.counters_u.next_state [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\counters_u.$procmux$540_Y [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\counters_u.$procmux$540_Y [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\counters_u.$procmux$540_Y [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\aes256_enc.\counters_u.$procmux$540_Y [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $techmap2946$flatten\aes256_enc.\key_exp_u.$gt$src/key_exp.v:93$174.Y: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.new_data_d: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.bit_ctr_d [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.bit_ctr_d [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.bit_ctr_d [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.ctr_d [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.ctr_d [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.ctr_d [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.ctr_d [3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.ctr_d [4]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.ctr_d [5]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.ctr_d [6]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.ctr_d [7]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.ctr_d [8]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.ctr_d [9]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.ctr_d [10]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.state_d [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_rx_u.state_d [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.tx_d: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.data_d [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.data_d [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.data_d [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.data_d [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.data_d [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.data_d [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.data_d [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.ctr_d [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.ctr_d [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.ctr_d [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.ctr_d [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.ctr_d [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.ctr_d [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.ctr_d [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.ctr_d [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.ctr_d [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.ctr_d [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.ctr_d [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.state_d [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \serial_tx_u.state_d [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.
<suppressed ~18380 debug messages>

17.43. Executing OPT pass (performing simple optimizations).

17.43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~81 debug messages>

17.43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.43.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

17.43.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.43.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.43.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12961 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8477
        $auto$simplemap.cc:86:simplemap_bitop$8445

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12962 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8478
        $auto$simplemap.cc:86:simplemap_bitop$8446

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12963 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8479
        $auto$simplemap.cc:86:simplemap_bitop$8447

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12964 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8480
        $auto$simplemap.cc:86:simplemap_bitop$8448

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12965 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8481
        $auto$simplemap.cc:86:simplemap_bitop$8449

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12966 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8482
        $auto$simplemap.cc:86:simplemap_bitop$8450

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12967 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8483
        $auto$simplemap.cc:86:simplemap_bitop$8451

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12968 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8484
        $auto$simplemap.cc:86:simplemap_bitop$8452

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12969 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8485
        $auto$simplemap.cc:86:simplemap_bitop$8453

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12970 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8486
        $auto$simplemap.cc:86:simplemap_bitop$8454

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12971 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8487
        $auto$simplemap.cc:86:simplemap_bitop$8455

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12972 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8488
        $auto$simplemap.cc:86:simplemap_bitop$8456

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12973 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8489
        $auto$simplemap.cc:86:simplemap_bitop$8457

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12974 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8490
        $auto$simplemap.cc:86:simplemap_bitop$8458

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12975 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8491
        $auto$simplemap.cc:86:simplemap_bitop$8459

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12976 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8492
        $auto$simplemap.cc:86:simplemap_bitop$8460

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12977 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8493
        $auto$simplemap.cc:86:simplemap_bitop$8461

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12978 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8494
        $auto$simplemap.cc:86:simplemap_bitop$8462

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12979 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8495
        $auto$simplemap.cc:86:simplemap_bitop$8463

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12980 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8496
        $auto$simplemap.cc:86:simplemap_bitop$8464

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12981 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8497
        $auto$simplemap.cc:86:simplemap_bitop$8465

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12982 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8498
        $auto$simplemap.cc:86:simplemap_bitop$8466

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12983 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8499
        $auto$simplemap.cc:86:simplemap_bitop$8467

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12984 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8500
        $auto$simplemap.cc:86:simplemap_bitop$8468

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12985 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8501
        $auto$simplemap.cc:86:simplemap_bitop$8469

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12986 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8502
        $auto$simplemap.cc:86:simplemap_bitop$8470

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12987 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8503
        $auto$simplemap.cc:86:simplemap_bitop$8471

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12988 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8504
        $auto$simplemap.cc:86:simplemap_bitop$8472

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12989 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8505
        $auto$simplemap.cc:86:simplemap_bitop$8473

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12990 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8506
        $auto$simplemap.cc:86:simplemap_bitop$8474

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12991 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8507
        $auto$simplemap.cc:86:simplemap_bitop$8475

    Found cells that share an operand and can be merged by moving the $_MUX_ $auto$muxcover.cc:519:implement_best_cover$12992 in front of them:
        $auto$simplemap.cc:86:simplemap_bitop$8508
        $auto$simplemap.cc:86:simplemap_bitop$8476

17.43.7. Executing OPT_DFF pass (perform DFF optimizations).

17.43.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

17.43.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.
<suppressed ~32 debug messages>

17.43.10. Rerunning OPT passes. (Maybe there is more to do..)

17.43.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

17.43.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.43.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.43.14. Executing OPT_SHARE pass.

17.43.15. Executing OPT_DFF pass (perform DFF optimizations).

17.43.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

17.43.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.43.18. Rerunning OPT passes. (Maybe there is more to do..)

17.43.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes256_uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

17.43.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes256_uart.
Performed a total of 0 changes.

17.43.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes256_uart'.
Removed a total of 0 cells.

17.43.22. Executing OPT_SHARE pass.

17.43.23. Executing OPT_DFF pass (perform DFF optimizations).

17.43.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..

17.43.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes256_uart.

17.43.26. Finished OPT passes. (There is nothing left to do.)

17.44. Executing TECHMAP pass (map to technology primitives).

17.44.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/mux_map.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/mux_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$mux'.
Successfully finished Verilog frontend.

17.44.2. Continuing TECHMAP pass.
Using template $paramod\$mux\WIDTH=32'00000000000000000000000000000001 for cells of type $mux.
No more expansions possible.
<suppressed ~48 debug messages>

17.45. Executing ABC pass (technology mapping using ABC).

17.45.1. Extracting gate netlist of module `\aes256_uart' to `<abc-temp-dir>/input.blif'..
Extracted 3440 gates and 4843 wires to a netlist network with 1401 inputs and 968 outputs.

17.45.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =    1310.
ABC: Participating nodes from both networks       =    2715.
ABC: Participating nodes from the first network   =    1309. (  70.64 % of nodes)
ABC: Participating nodes from the second network  =    1406. (  75.88 % of nodes)
ABC: Node pairs (any polarity)                    =    1309. (  70.64 % of names can be moved)
ABC: Node pairs (same polarity)                   =    1166. (  62.92 % of names can be moved)
ABC: Total runtime =     0.08 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

17.45.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     1852
ABC RESULTS:        internal signals:     2474
ABC RESULTS:           input signals:     1401
ABC RESULTS:          output signals:      968
Removing temp directory.
Removed 0 unused cells and 3005 unused wires.

17.46. Executing TECHMAP pass (map to technology primitives).

17.46.1. Executing Verilog-2005 frontend: /home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/lut_map.v
Parsing Verilog input from `/home/saulgr_rog/Documents/MasterTh/cc-toolchain-linux/bin/yosys/share/gatemate/lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

17.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01101001 for cells of type $lut.
Using template $paramod$fbc7065e252ed45ec9bbbda32b83198d0867676a\$lut for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110101 for cells of type $lut.
Using template $paramod$deb4f121bbf3d55ed9a98f692fd112e0918f51b5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod$4282def8dbd6df3d1248ad282c629bee684502c2\$lut for cells of type $lut.
Using template $paramod$493a387f07e67be1118b1c2871fe49222bbc44e6\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011000 for cells of type $lut.
Using template $paramod$78e1751931755f088c8bc676bcbc3bb642c26bfc\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010100 for cells of type $lut.
Using template $paramod$1f3b67373a23476b64a6ed61bde9dbe9df1086de\$lut for cells of type $lut.
Using template $paramod$4cf5305612d86489c1a6171729557670bf08582e\$lut for cells of type $lut.
Using template $paramod$2bdfdda73873e8931790d872b72220895e67fee5\$lut for cells of type $lut.
Using template $paramod$77a79c63321da6f25f9b54063a156fd8ed6af952\$lut for cells of type $lut.
Using template $paramod$ed8c03ad511f650cbc130404bfb483f77070eec3\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01100000 for cells of type $lut.
Using template $paramod$0c2296364f9f7a89cffcf4395ff6f31a023265e4\$lut for cells of type $lut.
Using template $paramod$e040dce33cfde8fab0e07e7221ade4814dec84f0\$lut for cells of type $lut.
Using template $paramod$c80a3f83d1d118a21306c2531f1e4f6fe24b9819\$lut for cells of type $lut.
Using template $paramod$f2d1f5eef8d86d705bcc28ce356929bbd5f57bd0\$lut for cells of type $lut.
Using template $paramod$7079fc84ea99f5169a363294b55662e40ffc97e8\$lut for cells of type $lut.
Using template $paramod$58eeb77235a0ca2f890419ea9319cfc4bcd0f07d\$lut for cells of type $lut.
Using template $paramod$cd579e4730c9b7a644643074bc4253c884ccd819\$lut for cells of type $lut.
Using template $paramod$83bbac075f592f65820484d8d7c1874fa68829fa\$lut for cells of type $lut.
Using template $paramod$db8f450e6662991ef955879419e948046224222e\$lut for cells of type $lut.
Using template $paramod$7d7a4daebacd1b0953bba09a5fde0e48eea4243b\$lut for cells of type $lut.
Using template $paramod$89aa7763f6237564cc9c49e885c10d294c9b4634\$lut for cells of type $lut.
Using template $paramod$948dd2ffa030d5b4f89d0bac81e2525d9a86122d\$lut for cells of type $lut.
Using template $paramod$7793f7418d8761863bd40a3483119b0278d0943b\$lut for cells of type $lut.
Using template $paramod$3bcd6314de23180573ecc5a7e6c63581f0c5beef\$lut for cells of type $lut.
Using template $paramod$ef4aaec3351547fbcdb9f051d81a405aedf72d1c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101111 for cells of type $lut.
Using template $paramod$e94afd183fcbde4c849d3e6c314d64883b2488d5\$lut for cells of type $lut.
Using template $paramod$80bc945f6d438f16387422ec284dc12b4bb4e68f\$lut for cells of type $lut.
Using template $paramod$fbef11ace9bdbdedce6b366d076918a7489d2f67\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011110 for cells of type $lut.
Using template $paramod$9ce3cb48532e1935dedb6055756fefa71d90eef1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100001 for cells of type $lut.
Using template $paramod$32698b63fedf17a0ddd735c22c8980c62f1954ba\$lut for cells of type $lut.
Using template $paramod$fd9405f61f13dd38ee130991e59b27f185cc37a0\$lut for cells of type $lut.
Using template $paramod$9cebf52e4fcf1dcaa9ed6b426eb71d5e49f8aa70\$lut for cells of type $lut.
Using template $paramod$9fd87618da739fdf9dc40366287090c8bf92cb07\$lut for cells of type $lut.
Using template $paramod$8325551c3691d78723fd30a88650e7ae3a677045\$lut for cells of type $lut.
Using template $paramod$a49123d498c133daff33f4d5d64f78ffef9a3126\$lut for cells of type $lut.
Using template $paramod$2d41e84d8a20fdfcf9ef269ad61c0ae8747d3e8f\$lut for cells of type $lut.
Using template $paramod$400e70ab40bc034f95288d674157da21bbd1fd4b\$lut for cells of type $lut.
Using template $paramod$82ac4228e04c92c7b8c133bfa256dd480e0cef1d\$lut for cells of type $lut.
Using template $paramod$973818279bc95792902f3c09371fd2407d04a2a5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$11ec7271d8e6e5aeaace08c13e4c601f10e31038\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$608f40069c27841a5b3bdf03643a34bdc8974072\$lut for cells of type $lut.
Using template $paramod$bba54c1ef87367812b4c15f4aed5ac70773df775\$lut for cells of type $lut.
Using template $paramod$5c32c59025c0b98f20e63f249d83e7ebb4b085e3\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod$62f6ec4235bf971942cc23ec48b54028446d4b76\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110001 for cells of type $lut.
Using template $paramod$c1da3356041b5961ce90da692c5d081fa50dcc57\$lut for cells of type $lut.
Using template $paramod$acf49cb7bd2805dee4b4ebb218aa5924b1be7704\$lut for cells of type $lut.
Using template $paramod$419cd99c524984e86316be824e4fbf1d7b2aec3c\$lut for cells of type $lut.
Using template $paramod$36bf3f348cedd81cce3dc5e7a46ae0d5bdbd69b6\$lut for cells of type $lut.
Using template $paramod$454b8efc34567312349b5e94352d2af8d466ea11\$lut for cells of type $lut.
Using template $paramod$e4d7d34a2c002a89c36ffc3bd7f5268718de0d86\$lut for cells of type $lut.
Using template $paramod$db426a764ff50f697706f4a12e2ca49a954793e8\$lut for cells of type $lut.
Using template $paramod$388ce53cafe674e7154fca52e06716dd24ba1ef3\$lut for cells of type $lut.
Using template $paramod$c52d79bcb4d842449922136bcdbfa6c1c5e8c282\$lut for cells of type $lut.
Using template $paramod$1dc1ebf58638f2b5a7bd16d3cbf70d85280d0255\$lut for cells of type $lut.
Using template $paramod$3c17fcbb332f03cef33f214b93f1f99815920a16\$lut for cells of type $lut.
Using template $paramod$2848c0169edb042c24b987f0e4007a50c6156217\$lut for cells of type $lut.
Using template $paramod$0a94662b0161fc067fc2a1123fd5ac94da2ec1db\$lut for cells of type $lut.
Using template $paramod$2d8ecce5c907513cebcd38ab5efe0fc26fc03464\$lut for cells of type $lut.
Using template $paramod$6d23198eb2b8f79a41c7626605a61009695893b1\$lut for cells of type $lut.
Using template $paramod$6e46ec5a196ba1a24b8e69ab094cadc07c13ac1f\$lut for cells of type $lut.
Using template $paramod$c24ed72ebb67e9ead6029e42e909ef7fc0abbb11\$lut for cells of type $lut.
Using template $paramod$164bdefb5d1c06a6528ecdb35b429071950e50d7\$lut for cells of type $lut.
Using template $paramod$6a34cd5b50e324824168b4186d0b04ba5e83b039\$lut for cells of type $lut.
Using template $paramod$c7df3d9de0223fb4b5ea6e591b1a78664b27497a\$lut for cells of type $lut.
Using template $paramod$803fbaff5781f29195e52cf1b357ed1d66ddd49d\$lut for cells of type $lut.
Using template $paramod$43779580bfffd5d5a9f321249a174febf1dac288\$lut for cells of type $lut.
Using template $paramod$b93d1ea7a612a32c185108f67a153d44ffb9aac2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod$54ac2b8b1e52a88712ac0648ae153cf909b2b2f7\$lut for cells of type $lut.
Using template $paramod$f63fe32f78d5f3c5de711945c592c8c5ec2303ae\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00101011 for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod$df0b68f8e63b2deb6710e23abd8b8ff0796d4897\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010000 for cells of type $lut.
Using template $paramod$179512a187da069f3b79ef6612a41e494e7d54b6\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110000 for cells of type $lut.
Using template $paramod$b4410865e8124402796f9dfbf73ef8d279fdbd08\$lut for cells of type $lut.
Using template $paramod$a55f1cd7dd899e453fe61d7ec95053334d858d41\$lut for cells of type $lut.
Using template $paramod$774861bf9b1885d60265e6ddea1c95a32f095489\$lut for cells of type $lut.
Using template $paramod$d6d3aaeac1b9aa2c4b652c48e0deb565040dda72\$lut for cells of type $lut.
Using template $paramod$2ea69c779d6c1b79ac5a87b0d1523c67d5628dba\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001101 for cells of type $lut.
Using template $paramod$1bf62ab10e48d71d6497bccacf5c70420c470fe9\$lut for cells of type $lut.
Using template $paramod$6b6967672cddfbe12dea2c030f112bffb1ec18d1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod$8c4e95796f7b245519a4dd5f42ae45cbb0b83692\$lut for cells of type $lut.
Using template $paramod$3039c7f41767c4672f4e3f22ad78f16d42720fbf\$lut for cells of type $lut.
Using template $paramod$41326ad8644342a66dfb051d050f2b6fbf15015b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod$81d8a60fd95b1a9f9ef71c12a774ae6988cb9fd5\$lut for cells of type $lut.
Using template $paramod$391f41f25d1fefdc245c798e53651a23e79db55a\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110001 for cells of type $lut.
Using template $paramod$b431bfd938e35871dd0b7668e1503c7e8b9d491c\$lut for cells of type $lut.
Using template $paramod$a26e2ce23dd197ee2c88a87600ea29af872f3a60\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011111 for cells of type $lut.
Using template $paramod$c1a19a87ccbbb03d43a72335db63f692ddf82cc1\$lut for cells of type $lut.
Using template $paramod$12e9049d8709286a770fe60b59ec4d94c39ce3c9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111110 for cells of type $lut.
Using template $paramod$a2d691ba21e093558f2a36669ee489fbccffbcd3\$lut for cells of type $lut.
Using template $paramod$dd682c55b6cb0a119c9061e2a36be75baf39be5f\$lut for cells of type $lut.
Using template $paramod$e9c77024ca501b890c641f9c0b10e27242db8730\$lut for cells of type $lut.
Using template $paramod$ae9b8abdb4f811ce37985dd5106af9cd21223954\$lut for cells of type $lut.
Using template $paramod$d97bfcb4c7209f0a42d65dba5d99b3e61b0525e6\$lut for cells of type $lut.
Using template $paramod$1b24100b2fd4c673c0fb73caa29fa7c0e2a28808\$lut for cells of type $lut.
Using template $paramod$9d62d5474adf567c2affab0747cc4ae75ca4b55e\$lut for cells of type $lut.
Using template $paramod$cd6c4b4da6d8737b72fd2dc8f5d83d8967445809\$lut for cells of type $lut.
Using template $paramod$bc796d1b37e47fe5b469d545b097ef86bfd034b1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod$53ce561f80f32d4298a3beadc88b6c5c78293221\$lut for cells of type $lut.
Using template $paramod$d35161d1d7976dcc02e7c7d51172431be85143b4\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~3738 debug messages>
Removed 0 unused cells and 4113 unused wires.

17.47. Executing CLKBUFMAP pass (inserting clock buffers).
Inserting CC_BUFG on aes256_uart.aes256_enc.clk[0].

17.48. Executing HIERARCHY pass (managing design hierarchy).

17.48.1. Analyzing design hierarchy..
Top module:  \aes256_uart

17.48.2. Analyzing design hierarchy..
Top module:  \aes256_uart
Removed 0 unused modules.

17.49. Printing statistics.

=== aes256_uart ===

   Number of wires:               1671
   Number of wire bits:           7863
   Number of public wires:         369
   Number of public wire bits:    4845
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3277
     CC_ADDF                        51
     CC_BUFG                         1
     CC_DFF                       1333
     CC_IBUF                         3
     CC_LUT1                        10
     CC_LUT2                       315
     CC_LUT3                       546
     CC_LUT4                       979
     CC_MX2                         32
     CC_OBUF                         7

17.50. Executing CHECK pass (checking for obvious problems).
Checking module aes256_uart...
Found and reported 0 problems.

17.51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes256_uart..
Removed 0 unused cells and 298 unused wires.
<suppressed ~298 debug messages>

17.52. Executing Verilog backend.

17.52.1. Executing BMUXMAP pass.

17.52.2. Executing DEMUXMAP pass.
Dumping module `\aes256_uart'.

End of script. Logfile hash: d787c26baa, CPU: user 5.27s system 0.03s, MEM: 52.79 MB peak
Yosys 0.24 (git sha1 313b7997b, g++ 12.2.0 -Os)
Time spent: 25% 75x opt_expr (1 sec), 17% 76x opt_clean (1 sec), ...
